
fn get_pi(): f32
{
	println("get_pi()");
	let pi = 0.0f;
	for k in [0: 10]
	{
		pi += (1 / 16.0f ** k) *
		(
			4.0f / (8 * k + 1) -
			2.0f / (8 * k + 4) -
			1.0f / (8 * k + 5) -
			1.0f / (8 * k + 6)
		);
	}
	return pi;
}

fn my_sin(x: f32): f32
{
	println("my_sin()");
	// Calculate sine(x) using Taylor series expansion
	// around x = 0.0f
	//
	// Don't use this in production.  Wait until it's
	// implimented intrinsically in syntran

	let s = 0.0f;
	let x2 = x ** 2;
	let sign = 1;
	let frac = x;

	for k in [1: 20]
	{
		s += sign * frac;
		sign *= -1;
		let k2 = 2 * k;
		frac *= x2 / (k2 * (k2 + 1));
	}

	return s;
}

let pi = get_pi();
//println("pi = ", pi);

// Number of values to test
let n = 13;

let sin_array = [0.0f; n];
for i in [0: n]
{
	let x = i * pi / 6;
	sin_array[i] = my_sin(x);
}

//println("sin_array = ", sin_array);

let expected = [0.000000E+00f, 4.999999E-01f,
8.660253E-01f, 9.999999E-01f, 8.660255E-01f, 5.000002E-01f,
-1.887498E-07f, -4.999993E-01f, -8.660258E-01f,
-1.000000E+00f, -8.660244E-01f, -5.000003E-01f,
-2.691158E-06f];

let norm = 0.0f;
let tol = 1.e-9f;

for i in [0: size(expected, 0)]
	norm += (sin_array[i] - expected[i]) ** 2;

return -tol < norm and norm < tol;

