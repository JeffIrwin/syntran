
// Test a syntran function that tokenizes an i32 within a str and then converts
// using the i32() intrinsic fn

//==========================================================

fn scan(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic scan()

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = 0;
	while not found and i < len(str_)
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (found)
		i -= 1;
	else
		i = -1;
}

//==========================================================

fn scanback(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic scan() with back = true

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = len(str_) - 1;
	while not found and i > 0
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i -= 1;
	}

	// return
	if (found)
		i += 1;
	else
		i = -1;
}

//==========================================================

fn verify(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic verify()

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = true;
	let i = 0;
	while found and i < len(str_)
	{
		//println(i);

		let j = 0;
		found = false;
		while not found and j < len(set)
		{
			//found = str_[i] != set[j];
			//found = not (str_[i] == set[j]);
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (not found)
		i -= 1;
	else
		i = -1;
}

//==========================================================

fn tok_i32(str_: str): [i32; :]
{
	// tokenize a string into the first int contained within it, then return the
	// substring start index, end index, and length

	//println("starting tok_i32()");
	//println("str_ = ", str_);

	let nums = "1234567890";
	let beg_ = scan    (str_, nums);

	let n = len(str_);
	//println("n = ", n);

	// nasty bug which was just fixed
	let len_ = verify(str_[beg_:n], nums);
	//println("len_ = ", len_);

	let end_ = -1;
	if (len_ < 0)
	{
		// This is consistent with the way that verify() works in Fortran
		end_ = n - 1;
		len_ = end_ - beg_ + 1;
	}
	else
		end_ = beg_ + len_ - 1;

	//println("beg_ = ", beg_);
	//println("end_ = ", end_);

	//println("num beg = ", str_[beg_]);
	//println("num end = ", str_[end_]);
	//println("num str = ", str_[beg_: end_+1]);

	// return
	[beg_, end_, len_];
}

//==========================================================

fn parse_i32(str_: str): i32
{
	let toks = tok_i32(str_);

	// multiple return vals are packed into a vec bc i don't have structs :sad:
	let beg_ = toks[0];
	let end_ = toks[1];
	//let len_ = toks[2]; // not needed

	//println("parse_i32 substr = ", str_[beg_: end_+1]);

	let ans = i32(str_[beg_: end_+1]);
	//println("parse_i32 = ", ans);

	// return
	ans;
}

//==========================================================

fn main(): bool
{

	let correct = true;

	correct = correct and 1337 == parse_i32("1337");
	correct = correct and 1337 == parse_i32("haystack1337haystack");
	correct = correct and 1337 == parse_i32("haystack 1337haystack");
	correct = correct and 1337 == parse_i32("haystack1337 haystack");
	correct = correct and 1337 == parse_i32("1337haystack");
	correct = correct and 1337 == parse_i32("haystack1337");
	correct = correct and 1337 == parse_i32("hay1337haystack");
	correct = correct and 1337 == parse_i32("haystack1337hay");
	correct = correct and 1337 == parse_i32("hays1337haystack");
	correct = correct and 1337 == parse_i32("haystack1337hays");

	//println();

	correct = correct and 137 == parse_i32("137");
	correct = correct and 137 == parse_i32("haystack137haystack");
	correct = correct and 137 == parse_i32("haystack 137haystack");
	correct = correct and 137 == parse_i32("haystack137 haystack");
	correct = correct and 137 == parse_i32("137haystack");
	correct = correct and 137 == parse_i32("haystack137");
	correct = correct and 137 == parse_i32("hay137haystack");
	correct = correct and 137 == parse_i32("haystack137hay");
	correct = correct and 137 == parse_i32("hays137haystack");
	correct = correct and 137 == parse_i32("haystack137hays");

	//println("correct = ", correct);

	// return 
	correct;

}

//==========================================================

main();

//==========================================================

