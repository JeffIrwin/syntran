
// Test a syntran function that tokenizes an i32 within a str and then converts
// using the i32() intrinsic fn

//==========================================================

// These linear algebra fns are helpful for verifying vectors of expected
// results

fn sub_fn(u: [i32; :], v: [i32; :]): [i32; :]
{
	// Return w = u - v
	//
	// Don't use this in production
	//println("starting sub_fn");

	// This should crash if there is a size mismatch
	let n = max(size(u,0), size(v,0));
	let w = [0; n];

	for i in [0: n]
		w[i] = u[i] - v[i];
	w;
}

fn norm_fn(u: [i32; :]): i32
{
	//println("starting norm_fn()");
	let norm = 0;
	for i in [0: size(u,0)]
		norm = norm + u[i] ** 2;
	//norm ** 0.5;  // not an int
	norm;
}

fn norm_diff(u: [i32; :], v: [i32; :]): i32
{
	// Return the norm of the difference between u and v
	//println();
	//println("starting norm_diff()");

	//let ans = norm_fn(sub_fn(u, v));

	let sub_ = sub_fn(u, v);
	let ans = norm_fn(sub_);

	ans;
}

//==========================================================

fn scan(str_: str, set: str): i64
{
	// c.f. Fortran intrinsic scan()

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = i64(0);
	while not found and i < len(str_)
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (found)
		i -= 1;
	else
		i = i64(-1);
}

//==========================================================

fn scanback(str_: str, set: str): i64
{
	// c.f. Fortran intrinsic scan() with back = true

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = len(str_) - 1;
	while not found and i > 0
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i -= 1;
	}

	// return
	if (found)
		i += 1;
	else
		i = -1;
}

//==========================================================

fn verify(str_: str, set: str): i64
{
	// c.f. Fortran intrinsic verify()

	//println("starting verify()");
	//println("str_ = """, str_, """");
	//println("set = ", set);

	let found = true;
	let i = i64(0);
	while found and i < len(str_)
	{
		//println(i);

		let j = 0;
		found = false;
		while not found and j < len(set)
		{
			//found = str_[i] != set[j];
			//found = not (str_[i] == set[j]);
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (not found)
		i -= 1;
	else
		i = i64(-1);
}

//==========================================================

fn tok_i32(str_: str): [i64; :]
{
	// tokenize a string into the first int contained within it, then return the
	// substring start index, end index, and length

	//println("starting tok_i32()");
	//println("str_ = """, str_, """");

	let nums = "1234567890";
	let beg_ = scan    (str_, nums);
	//println("beg_ = ", beg_);

	let n = len(str_);
	//println("n = ", n);

	// nasty bug which was just fixed
	let len_ = i64(-1);
	if (beg_ >= 0)
		len_ = verify(str_[beg_:n], nums);
	//println("len_ = ", len_);

	let end_ = i64(-1);
	if (beg_ < 0)
	{
		//println("no beg_");
	}
	else if (len_ < 0)
	{
		// This is consistent with the way that verify() works in Fortran
		end_ = n - 1;
		len_ = end_ - beg_ + 1;
	}
	else
		end_ = beg_ + len_ - 1;

	//println("beg_ = ", beg_);
	//println("end_ = ", end_);

	//println("num beg = ", str_[beg_]);
	//println("num end = ", str_[end_]);
	//println("num str = ", str_[beg_: end_+1]);

	// return
	[beg_, end_, len_];
}

//==========================================================

fn read_i32(str_: str): i32
{
	let toks = tok_i32(str_);

	// multiple return vals are packed into a vec bc i don't have structs :sad:
	let beg_ = toks[0];
	let end_ = toks[1];
	//let len_ = toks[2]; // not needed

	//println("read_i32 substr = ", str_[beg_: end_+1]);

	let ans = parse_i32(str_[beg_: end_+1]);
	//println("read_i32 = ", ans);

	// return
	ans;
}

fn read_i32s(str_: str): [i32; :]
{
	// Parse a vector of i32 integers from a string.  Any non-int characters are
	// treated as delimiters

	let i = i64(0);
	let n = len(str_);

	//println("str_ = ", str_);
	//println("n = ", n);

	//let toks = i64([0, 0, 0]);
	let toks = [i64(0); 3];
	let num_nums = 0;  // the number of numbers

	while toks[0] >= 0
	{
		//println("i = ", i);
		toks = tok_i32(str_[i:n]);
		//println("toks = ", toks);
		//println("num = ", num);
		num_nums += 1;
		i += toks[1] + 1;
	}
	num_nums -= 1;

	let nums = [0; num_nums];
	i = i64(0);
	for j in [0: num_nums]
	{
		//println("i = ", i);
		toks = tok_i32(str_[i:n]);
		//println("toks = ", toks);
		let num = parse_i32(str_[i + toks[0]: i + toks[1]+1]);
		//println("num = ", num);
		nums[j] = num;
		//num_nums += 1;
		i += toks[1] + 1;
	}

	// return
	nums;
}

//==========================================================

fn main(): i32
{
	let sum = 0;
	let expect = [0; 0];
	let actual = [0; 0];

	expect =              [ 1337 ];
	actual = read_i32s("hay1337haystack");
	sum += norm_diff(expect, actual);

	expect =           [ 1337 ];
	actual = read_i32s("1337haystack");
	sum += norm_diff(expect, actual);

	expect =              [ 1337 ];
	actual = read_i32s("hay1337");
	sum += norm_diff(expect, actual);

	expect =              [ 1337,   42];
	actual = read_i32s("hay1337hays42haystack");
	sum += norm_diff(expect, actual);

	expect =           [ 1337,   42];
	actual = read_i32s("1337hays42");
	sum += norm_diff(expect, actual);

	expect =           [ 1337,   42,    16384];
	actual = read_i32s("1337hays42hayst16384");
	sum += norm_diff(expect, actual);

	expect =              [ 1337,   42,    16384];
	actual = read_i32s("hay1337hays42hayst16384ack");
	sum += norm_diff(expect, actual);

	expect =              [ 1373,   43816,    24];
	actual = read_i32s("hay1373hays43816hayst24ack");
	sum += norm_diff(expect, actual);

	//println("sum = ", sum);
	sum;
}

//==========================================================

main();

//==========================================================

