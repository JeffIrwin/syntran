
// Quick sort algorithm

fn qsort(arr: [i32; :]): [i32; :]
{
	//println("starting qsort()");
	//println("arr = ", arr);

	let l = 0;
	let h = size(arr,0) - 1;

	if l < h
	{
		let stack = [0; h - l + 1];

		let top = -1;

		stack[(top += 1)] = l;
		stack[(top += 1)] = h;

		while top >= 0
		{
			h = stack[top];
			top -= 1;

			l = stack[top];
			top -= 1;

			//// inlined
			//let p = partition(arr, l, h);

			// TODO: median-of-3 pivot.  c.f. aoc
			//
			// Also add a sort fn which returns an index array instead of
			// modifying the input

			let x = arr[h];
			let i = (l - 1);
			for j in [l: h]
				if arr[j] <= x
				{
					i += 1;
					let tmp = arr[i];
					arr[i]  = arr[j];
					arr[j]  = tmp;
				}
			let tmp = arr[i+1];
			arr[i+1] = arr[h];
			arr[h] = tmp;
			let p = i + 1;

			if p - 1 > l
			{
				stack[(top += 1)] = l;
				stack[(top += 1)] = p - 1;
			}

			if p + 1 < h
			{
				stack[(top += 1)] = p + 1;
				stack[(top += 1)] = h;
			}
		}
	}
	//println("arr = ", arr);
	//let ans = arr;
	return arr;
}

let arr = [1223, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
	1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
	1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
	839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,
	937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
	751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,
	659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
	587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
	491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
	419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,
	337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
	257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
	181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
	109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
	43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,
	1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 2];

let sorted = qsort(arr);
let ans = sorted;

// Actually from primes example (test-17)
//
// TODO: add another test with this array totally reversed (use a reverse helper
// fn)
let expect =      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
	43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,
	109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
	181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
	257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
	337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
	419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,
	491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
	587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
	659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
	751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,
	839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,
	937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
	1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
	1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
	1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223];


//println("sorted = ", sorted);
//println("expect = ", expect);

let norm = 0;
for i in [0: size(expect, 0)]
{
	let diff = ans[i] - expect[i];

	// Poor man's abs()
	if (diff < 0) diff = -diff;
	norm = norm + diff;
}
return norm;

