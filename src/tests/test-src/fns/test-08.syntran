
fn get_pi(): f32
{
	// Calculate pi
	let local_pi = 0.0f;

	for k in [0: 10]
	{
		local_pi = local_pi + 1 / (16.0f ** k) *
			(
				4.0f / (8*k + 1) -
				2.0f / (8*k + 4) -
				1.0f / (8*k + 5) -
				1.0f / (8*k + 6)
			);
	}

	//local_pi;
	// 3.141593E+00
	return local_pi;
}

fn sin_fn(x: f32): f32
{
	// Calculate sin(x) using Taylor series
	//
	// DO NOT use this in production, as it is only accurate for x near
	// 0.  A better implementation would take advantage of the periodic
	// nature of sine and wrap large angles to range [-pi/2, pi/2] and
	// use identities like sin(x) == sin(180 - x)

	// Initialize Taylor series terms
	let xpow = x;
	let factorial = 1.0f;
	let sign = 1;

	// Sum odd terms only
	let sinx = 0.0f;
	for k in [1: 10]
	{
		sinx = sinx + sign * xpow / factorial;
		xpow = xpow * x ** 2;
		factorial = factorial * (2*k) * (2*k + 1);
		sign = -sign;
	}

	return sinx;
}

let pi = get_pi();

let ans =
	[
		sin_fn(-   pi / 6),
		sin_fn(0 * pi / 6),
		sin_fn(1 * pi / 6),
		sin_fn(1 * pi / 4),
		sin_fn(2 * pi / 6),
		sin_fn(3 * pi / 6),
		sin_fn(4 * pi / 6),
		sin_fn(3 * pi / 4),
		sin_fn(5 * pi / 6),
		sin_fn(6 * pi / 6)
	];
// FIXME: update norm iterator range below when adding values to ans
// list

ans;

let expect =
	[
		-0.5f,
		 0.0f,
		 0.5f,
		 2 ** 0.5f / 2,
		 3 ** 0.5f / 2,
		 1.0f,
		 3 ** 0.5f / 2,
		 2 ** 0.5f / 2,
		 0.5f,
		 0.0f
	];

expect;

let norm = 0.0f;
for i in [0: 10]
	norm = norm + (ans[i] - expect[i]) ** 2;
norm = norm ** 0.5f;

norm;

let tol = 1.e-5f;
return -tol < norm and norm < tol;

