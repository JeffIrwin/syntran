
fn add_fn(u: [f32; :], v: [f32; :]): [f32; :]
{
	// Return w = u + v
	//
	// Don't use this in production

	let w = [0.0f; size(u,0)];

	for i in [0: size(u,0)]
		w[i] = u[i] + v[i];
	return w;
}

fn sub_fn(u: [f32; :], v: [f32; :]): [f32; :]
{
	// Return w = u - v
	//
	// Don't use this in production

	let w = [0.0f; size(u,0)];

	for i in [0: size(u,0)]
		w[i] = u[i] - v[i];
	return w;
}

fn norm_fn(u: [f32; :]): f32
{
	let norm = 0.0f;
	for i in [0: size(u,0)]
		norm = norm + u[i] ** 2;
	return norm ** 0.5f;
}

fn norm_diff(u: [f32; :], v: [f32; :]): f32
{
	// Return the norm of the difference between u and v
	return norm_fn(sub_fn(u, v));
}

let n = 3;

let a = [0.0f: 1.0f * (n - 1); n];
let b = [1.0f * (n+1): -1.0f: 1.5f];

a;
b;

let ans = add_fn(a, b);
//let ans = sub_fn(a, b);
ans;

let expect = [1.0f * (n+1); n];
expect;

let diff = sub_fn(ans, expect);
diff;

//let norm = norm_fn(diff);
//norm;
//norm_fn(a);

return norm_diff(ans, expect);

