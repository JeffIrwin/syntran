
// Search for the first n primes
let n = 200;

// Pre-allocate an array of n primes
let primes = [0; n];
let num_primes = 0;

//======================================================================

fn is_divisible(numerator: i32, denominator: i32): bool
{
	return numerator % denominator == 0;
}

fn is_prime(number: i32): bool
{
	// This function only works if you build up the list of primes by
	// calling it for number in [2: \infty]

	let prime = true;

	let i = 0;
	while i < num_primes and prime
	{
		let p = primes[i];
		prime = prime and not is_divisible(number, p);
		i = i + 1;
	}

	// Function return value
	return prime;
}

//======================================================================

// Start at 2 because 1 is not prime by definition
let i = 2;
while num_primes < n
{
	if is_prime(i)
	{
		primes[num_primes] = i;
		num_primes = num_primes + 1;
	}
	i = i + 1;
}

let ans = primes;

let expect =      [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
	43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,
	109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,
	181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
	257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
	337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
	419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,
	491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
	587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
	659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
	751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,
	839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,
	937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
	1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
	1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
	1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223];

let norm = 0;
for i in [0: n]
{
	let diff = ans[i] - expect[i];

	// Poor man's abs()
	if (diff < 0) diff = -diff;
	norm = norm + diff;
}
return norm;

