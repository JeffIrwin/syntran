
fn sub_fn(u: [f32; :], v: [f32; :]): [f32; :]
{
	// Return w = u - v
	//
	// Don't use this in production

	let w = [0.0; size(u,0)];

	for i in [0: size(u,0)]
		w[i] = u[i] - v[i];
	return w;
}

fn norm_fn(u: [f32; :]): f32
{
	let norm = 0.0;
	for i in [0: size(u,0)]
		norm = norm + u[i] ** 2;
	return norm ** 0.5;
}

fn norm_diff(u: [f32; :], v: [f32; :]): f32
{
	// Return the norm of the difference between u and v
	return norm_fn(sub_fn(u, v));
}

fn mul_mat_vec(mat: [f32; :,:], vec: [f32; :]): [f32; :]
{
	// Matrix-vector multiplication.  Return mat * vec.
	//
	// Don't use this in production.  No size checking!
	let ans =  [0.0; size(mat,0)];
	for     j in [0: size(mat,1)]
		for i in [0: size(mat,0)]
			ans[i] = ans[i] + mat[i,j] * vec[j];
	return ans;
}

let x = [62.0, 84.0, 68.0, 42.0];

let a = [0.0; 3,4];

// test-04 has some syntactic sugar to initialize this matrix more compactly
a[0,0] = -0.3847819 ; a[0,1] =  -0.374716  ; a[0,2] =   0.1328498 ; a[0,3] =   0.1870189;
a[1,0] =  0.8659232 ; a[1,1] =  -0.2767278 ; a[1,2] =  -0.0347056 ; a[1,3] =   0.0030683;
a[2,0] = -0.5707984 ; a[2,1] =  -0.4155467 ; a[2,2] =  -0.3356562 ; a[2,3] =  -0.1262825;

let b = mul_mat_vec(a, x);
b;

let expect = [-3.844404E+01, 2.821099E+01, -9.842391E+01];

return norm_diff(b, expect) < 1.E-5;

