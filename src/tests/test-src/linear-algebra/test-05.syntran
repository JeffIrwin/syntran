
fn mul_mat_vec(mat: [f32; :,:], vec: [f32; :]): [f32; :]
{
	// Matrix-vector multiplication.  Return mat * vec
	let ans =  [0.0f; size(mat,0)];
	for     j in [0: size(mat,1)]
		for i in [0: size(mat,0)]
			ans[i] = ans[i] + mat[i,j] * vec[j];
	return ans;
}

fn mul_mat(a: [f32; :,:], b: [f32; :,:]): [f32; :,:]
{
	// Matrix-matrix multiplication.  Return a * b
	let c = [0.0f; size(a,0), size(b,1)];
	for         k in [0: size(b,1)]
		for     j in [0: size(a,1)]
			for i in [0: size(a,0)]
				c[i,k] = c[i,k] + a[i,j] * b[j,k];
	return c;
}

// 3D vector with x = 1.0f, y = 2.0f, z = 3.0f
let vec = [1.0f, 2.0f, 3.0f];

// 3x3 identity matrix.  Sizes go after the semicolon
let eye3 =
	[
		1.0f, 0.0f, 0.0f,
		0.0f, 1.0f, 0.0f,
		0.0f, 0.0f, 1.0f ;
		3, 3
	];

// 90 degree x rotation.  Note that arrays are stored in row-major
// order, so this appears transposed
let rotx =
	[
		1.0f,  0.0f,  0.0f,
		0.0f,  0.0f,  1.0f,
		0.0f, -1.0f,  0.0f ;
		3, 3
	];

// 90 degree y rotation
let roty =
	[
		0.0f,  0.0f, -1.0f,
		0.0f,  1.0f,  0.0f,
		1.0f,  0.0f,  0.0f ;
		3, 3
	];

// Apply identity transformation
mul_mat_vec(eye3, vec);
// [1.0f, 2.0f, 3.0f]

// Apply 90 degree x rotation
return mul_mat_vec(rotx, vec);
// [1.0f, -3.0f, 2.0f]

