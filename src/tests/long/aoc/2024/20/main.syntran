
#include("../../utils-2024.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

let NDIRS = 4;
let DIRS =
[
	-1,  0, // west
	 1,  0, // east
	 0, -1, // north
	 0,  1  // south
	 ;
	 2, NDIRS
];
let WEST  = 0;
let EAST  = 1;
let NORTH = 2;
let SOUTH = 3;

fn part1(): i64
{
	let sum_ = 0'i64;

	let chars = read_char_mat(filename);
	//print_char_mat(&chars);

	let nx = i32(size(chars, 0));
	let ny = i32(size(chars, 1));

	// Find start and end locations
	let xs = -1;
	let ys = -1;
	let xe = -1;
	let ye = -1;
	for y in [0: ny]
	for x in [0: nx]
	{
		if chars[x,y] == "S"
		{
			xs = x;
			ys = y;
		}
		if chars[x,y] == "E"
		{
			xe = x;
			ye = y;
		}
	}
	//println("xys = ", [xs, ys]);
	//println("xye = ", [xe, ye]);

	// First, do a BFS to find the usual path without any shortcuts

	let QUEUE_CAP = nx * ny * 4;
	let queue = [-1; 3, QUEUE_CAP]; // x, y, dist
	let queue_beg = 0;
	let queue_end = 0;

	let visited = [false; nx, ny];
	let dists   = [-1   ; nx, ny];

	// Push
	queue[:, queue_end] = [xs, ys, 0]; queue_end += 1;

	while queue_beg < queue_end
	{
		// Pop
		let u = queue[:, queue_beg]; queue_beg += 1;

		// Unpack from vec
		let x0    = u[0];
		let y0    = u[1];
		let dist0 = u[2];

		if (visited[x0, y0]) continue;
		visited[x0, y0] = true;

		dists[x0, y0] = dist0;

		for idir in [0: NDIRS]
		{
			let dir = DIRS[:, idir];
			let x = x0 + dir[0];
			let y = y0 + dir[1];

			if (not in_bounds([0,0], [x,y], [nx,ny])) continue;
			if (chars[x,y] == "#") continue;

			// Push neighbor
			queue[:, queue_end] = [x, y, dist0 + 1]; queue_end += 1;
			if queue_end >= QUEUE_CAP
			{
				println("Error:  QUEUE_CAP overflow!");
				exit(-1);
			}
		}
	}
	//println("dists[xe,ye] = ", dists[xe,ye]);
	//println("dists = ", dists);

	// Search for shortcuts.  Sides/edges can't be shortcuts and this saves us
	// from bounds checking
	for y in [1: ny-1]
	for x in [1: nx-1]
	{
		if (chars[x,y] != "#") continue;

		let pe = [x,y] + DIRS[:, EAST ];
		let pw = [x,y] + DIRS[:, WEST ];
		let pn = [x,y] + DIRS[:, NORTH];
		let ps = [x,y] + DIRS[:, SOUTH];

		let ce = chars[ pe[0], pe[1] ];
		let cw = chars[ pw[0], pw[1] ];
		let cn = chars[ pn[0], pn[1] ];
		let cs = chars[ ps[0], ps[1] ];

		let diff = -1;

		// The shortcut itself is a distance of 2, so subtract that
		if ce != "#" and cw != "#"
			diff = abs(dists[ pe[0], pe[1] ] - dists[ pw[0], pw[1] ]) - 2;
		if cn != "#" and cs != "#"
			diff = abs(dists[ pn[0], pn[1] ] - dists[ ps[0], ps[1] ]) - 2;
		//println("diff = ", diff);
		if (diff >= 100) sum_ += 1;
	}

	println("part 1 = ", sum_);
	return sum_;
}

fn part2(): i64
{
	let sum_ = 0'i64;

	let chars = read_char_mat(filename);
	//print_char_mat(&chars);

	let nx = i32(size(chars, 0));
	let ny = i32(size(chars, 1));

	// Find start and end locations and valid path points
	let xs = -1;
	let ys = -1;
	let xe = -1;
	let ye = -1;
	let NP_CAP = nx * ny;
	let p = [-1; 2, NP_CAP];
	let np = 0;
	for y in [0: ny]
	for x in [0: nx]
	{
		if chars[x,y] == "S"
		{
			xs = x;
			ys = y;
		}
		if chars[x,y] == "E"
		{
			xe = x;
			ye = y;
		}
		if chars[x,y] != "#"
		{
			p[:,np] = [x, y];
			np += 1;
		}
	}
	p = p[:, 0: np]; // trim

	//println("xys = ", [xs, ys]);
	//println("xye = ", [xe, ye]);
	//println("p = ", p);

	// First, do a BFS to find the usual path without any shortcuts

	let QUEUE_CAP = nx * ny * 4;
	let queue = [-1; 3, QUEUE_CAP]; // x, y, dist
	let queue_beg = 0;
	let queue_end = 0;

	let visited = [false; nx, ny];
	let dists   = [-1   ; nx, ny];

	// Push
	queue[:, queue_end] = [xs, ys, 0]; queue_end += 1;

	while queue_beg < queue_end
	{
		// Pop
		let u = queue[:, queue_beg]; queue_beg += 1;

		// Unpack from vec
		let x0    = u[0];
		let y0    = u[1];
		let dist0 = u[2];

		if (visited[x0, y0]) continue;
		visited[x0, y0] = true;

		dists[x0, y0] = dist0;

		for idir in [0: NDIRS]
		{
			let dir = DIRS[:, idir];
			let x = x0 + dir[0];
			let y = y0 + dir[1];

			if (not in_bounds([0,0], [x,y], [nx,ny])) continue;
			if (chars[x,y] == "#") continue;

			// Push neighbor
			queue[:, queue_end] = [x, y, dist0 + 1]; queue_end += 1;
			if queue_end >= QUEUE_CAP
			{
				println("Error:  QUEUE_CAP overflow!");
				exit(-1);
			}
		}
	}
	//println("dists[xe,ye] = ", dists[xe,ye]);
	//println("dists = ", dists);

	// Iterate through pairs of points
	for i1 in [0: np] {
	let x1 = p[0,i1];
	let y1 = p[1,i1];
	for i2 in [0: i1]
	{
		let x2 = p[0,i2];
		let y2 = p[1,i2];

		let norm1 = abs(x2 - x1) + abs(y2 - y1);
		if (norm1 > 20) continue;

		let diff = abs(dists[x2,y2] - dists[x1,y1]) - norm1;

		if (diff >= 100) sum_ += 1;
	}}

	println("part 2 = ", sum_);
	return sum_;
}

//==============================================================================

fn main(): i64
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2024/20");

	let sum_ = 0'i64;

	// Expect 1521 + 1013106
	sum_ += part1();
	//sum_ += part2(); // works in ~20 s but too slow for syntran unit testing

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

