
#include("../../utils-2024.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;
//ifile = 2; // smallest example

let filenames =
[
	"test-input.txt",
	"input.txt",
	"test-input2.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): i64
{
	let sum_ = 0'i64;

	let f = open(filename);
	let str_ = readln(f);
	close(f);

	//println("str_ = ", str_);

	let nmap = len(str_);
	//println("nmap = ", nmap);

	let nblock = 0'i64;
	let len_files = 0'i64;
	for i in [0: nmap]
	{
		let len_ = parse_i32(str_[i]);
		nblock += len_;
		if i % 2 == 0
			len_files += len_;
	}
	//println("nblock    = ", nblock);
	//println("len_files = ", len_files);

	let FREE = -1;
	let blocks = [FREE; nblock];
	let id = 0;
	let iblock = 0;
	for i in [0: nmap]
	{
		let len_ = parse_i32(str_[i]);
		if i % 2 == 0
		{
			blocks[iblock: iblock + len_] = id;
			id += 1;
		}
		iblock += len_;
	}
	//println("blocks = ", blocks);

	let il = 0;          // leftmost free block index
	let ir = nblock - 1; // rightmost non-free block
	while true
	{
		while blocks[il] >= 0
			il += 1;
		while blocks[ir] == FREE
			ir -= 1;
		//println("il = ", il);
		//println("ir = ", ir);

		if il >= ir
			break;

		blocks[il] = blocks[ir];
		blocks[ir] = FREE;
		//println("blocks = ", blocks);
		//println();
	}
	//println("blocks = ", blocks);

	//sum_ = product(blocks[0: len_files]);

	sum_ = sum([0: len_files] * blocks[0: len_files]);
	//for i in [0: len_files]
	//	sum_ += i * blocks[i];

	println("part 1 = ", sum_);
	return sum_;
}

fn part2old(): i64
{
	//println();
	//println("starting part2old()");
	let sum_ = 0'i64;

	let f = open(filename);
	let str_ = readln(f);
	close(f);

	//println("str_ = ", str_);

	let nmap = len(str_);
	//println("nmap = ", nmap);

	//let nblock = 0'i64;
	let nblock = 0;

	let len_files = 0'i64;
	for i in [0: nmap]
	{
		let len_ = parse_i32(str_[i]);
		nblock += len_;
		if i % 2 == 0
			len_files += len_;
	}
	//println("nblock    = ", nblock);
	//println("len_files = ", len_files);

	let FREE = -1;
	let blocks = [FREE; nblock];
	let id = 0;
	let iblock = 0;
	for i in [0: nmap]
	{
		let len_ = parse_i32(str_[i]);
		if i % 2 == 0
		{
			blocks[iblock: iblock + len_] = id;
			id += 1;
		}
		iblock += len_;
	}
	//println("blocks = ", blocks);

	// TODO: main-v0.syntran had an infinite loop.  I think it was the i32/i64
	// slice index bug which I already fixed in syntran main but haven't
	// installed.  So I changed this to use break_outer (and break_inner) bools
	// instead of actual break statements
	//
	// Anyway, I think I had actualy logical bugs in here too, so it should be
	// possible to use regular break statements with latest syntran
	//
	// This could is a hacked together mess which should be significantly
	// cleanable

	let il = 0;          // leftmost free block index (part 1 but not really in part 2)
	let ir = nblock - 1; // rightmost non-free block
	let break_outer = false;
	while (not break_outer)
	{
		while blocks[il] >= 0
			il += 1;
		while blocks[ir] == FREE and ir > 0
			ir -= 1;
		//println("il = ", il);
		//println("ir = ", ir);
		//println("id = ", blocks[ir], " ********************");

		// Get len of file at ir
		let irl = ir;
		while blocks[irl] == blocks[ir]
			irl -= 1;
		let len_file = ir - irl;
		//println("len_file = ", len_file);

		// Look for a free space that can accomodate the file
		//
		// `ill` is a local copy of `il`. `ilr` is the right-end of the free
		// space that has its left end at `ill`
		let ill = il;
		let break_inner = false;
		while (not break_inner)
		{
			let ilr = ill;
			while blocks[ilr] == FREE
			{
				ilr += 1;
			}
			let len_free = ilr - ill;
			//println("len_free = ", len_free);

			// Free space must be big enough. Also, never move a file to the
			// right
			if (len_free >= len_file and ill + len_free < ir)
			{
				// Move the whole file to the left and free its previous space
				blocks[ill: ill + len_file] = blocks[ir];
				//println("blocks = ", blocks);
				//println("irl, ir = ", [irl, ir]);
				blocks[irl + 1: ir + 1] = FREE;
				//println("blocks = ", blocks);
				break_inner = true;
			}
			// Increment ill and try again
			ill = ilr;
			while blocks[ill] >= 0 and ill < ir
			{
				ill += 1;
			}
			if ill >= ir
			{
				// We couldn't move the file
				break_inner = true;

				// Decrement `ir` to try the next file.  Don't try files that we
				// haven't tried moving before (not sure if this condition is
				// important)
				let ir0 = ir;
				while blocks[ir] >= blocks[ir0] and ir > 0
				{
					ir -= 1;
					while blocks[ir] == FREE and ir > 0
						ir -= 1;
				}
			}
		}

		if blocks[ir] == 0
			break_outer = true;

		//println("blocks = ", blocks);
		//println();
	}
	//println("blocks = ", blocks);

	//sum_ = sum([0: len_files] * blocks[0: len_files]);
	//sum_ = sum([0: nblock] * blocks[0: len_files]);
	for i in [0: nblock]
		if blocks[i] != FREE
			sum_ += i * blocks[i];

	println("part 2 = ", sum_);
	return sum_;
}

fn part2(): i64
{
	let sum_ = 0'i64;

	let f = open(filename);
	let str_ = readln(f);
	close(f);

	let nmap = len(str_);
	//println("str_ = ", str_);
	//println("nmap = ", nmap);

	let nblock = 0;

	// part1() and part2old() worked with a dense "block" representation, which
	// works well for part1 but is a mess in part2old
	//
	// instead, part2 is much easier with 4 arrays: (start) positions of files
	// and free spaces, and lengths of files and free spaces
	
	let nfile = nmap / 2;
	let nfree = nfile;
	if nmap % 2 == 1
		nfile += 1;
	//println("nfile = ", nfile);
	//println("nfree = ", nfree);

	let file_pos = [0; nfile];
	let file_len = [0: nfile];
	let free_pos = [0; nfree];
	let free_len = [0; nfree];

	let ifile = 0;
	let ifree = 0;
	let pos = 0;
	for i in [0: nmap]
	{
		let len_ = parse_i32(str_[i]);
		if i % 2 == 0
		{
			file_pos[ifile] = pos;
			file_len[ifile] = len_;
			ifile += 1;
		}
		else
		{
			free_pos[ifree] = pos;
			free_len[ifree] = len_;
			ifree += 1;
		}
		pos += len_;
	}
	//println("file_pos = ", file_pos);
	//println("file_len = ", file_len);
	//println();
	//println("free_pos = ", free_pos);
	//println("free_len = ", free_len);
	//println();

	// Left-most free index.  You can keep this at 0, but it's 3x faster to skip
	// known filled spaces
	let il = 0;

	// File 0 will never need to be moved
	for ifile in [nfile-1: -1: 0]
	{
		//println("file_len = ", file_len[ifile]);
		while free_len[il] == 0
			il += 1;
		for ifree in [il: nfree]
		{
			if free_pos[ifree] > file_pos[ifile]
			{
				// Don't move file to the right
				break;
			}
			if free_len[ifree] >= file_len[ifile]
			{
				// Free space is big enough.  Move the file
				file_pos[ifile] = free_pos[ifree];

				// Free space shrinks (possibly to 0) and shifts right
				free_len[ifree] -= file_len[ifile];
				free_pos[ifree] += file_len[ifile];

				break;
			}
		}
	}
	//println("file_pos = ", file_pos);
	//println("file_len = ", file_len);
	//println();
	//println("free_pos = ", free_pos);
	//println("free_len = ", free_len);
	//println();

	for i in [0: nfile]
		for pos in [file_pos[i]: file_pos[i] + file_len[i]]
			sum_ += pos * i;

	println("part 2 = ", sum_);
	return sum_;
}

//==============================================================================

fn main(): i64
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2024/9");

	let sum_ = 0'i64;

	// Expect 6366665108136 + 6398065450842
	sum_ += part1();
	sum_ += part2();

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

