
#include("../../utils.syntran");

//==============================================================================

let ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

// TODO: move to utils

fn floor_(x: f32): i32
{
	let i = i32(x);
	if (i > x) i -= 1;
	return i;
}

fn ceil_(x: f32): i32
{
	let i = i32(x);
	if (i < x) i += 1;
	return i;
}

// TODO: utils, consistent naming
fn minf32(a: f32, b: f32): f32
{
	let ans = a;
	if b < a
		ans = b;
	return ans;
}

fn maxf32(a: f32, b: f32): f32
{
	let ans = a;
	if b > a
		ans = b;
	return ans;
}

//==============================================================================

fn part1(): i32
{
	let prod_ = 1;

	let f = open(filename, "r");

	let str_ = readln(f);
	//println("str_ = ", str_);

	let strs  = split_(str_, ":");
	let times = parse_i32_delim(strs[1], " ");
	//println("times = ", times);

	str_ = readln(f);
	strs  = split_(str_, ":");
	let rec_dists = parse_i32_delim(strs[1], " ");
	//println("rec_dists = ", rec_dists);

	for i in [0: size(times, 0)]
	{
		let race_time = times[i];
		let rec_dist = rec_dists[i];

		//println("race_time, rec_dist = ", race_time, ", ", rec_dist);

		let nwin = 0;

		// dist == speed * duration;
		//      == speed * (race_time - j);
		//      == j * (race_time - j)
		//      == rec_dist;
		//
		// j * (race_time - j) - rec_dist == 0
		// -j**2 + race_time * j - rec_dist == 0;
		//
		//  a * j**2 + b * j + c == 0;
		//
		//   a = -1;  b = race_time;  c = -rec_dist;

		let a = -1.0f;
		let b =  1.0f * race_time;
		let c = -1.0f * rec_dist;

		let j1 = (-b + (b ** 2 - 4 * a * c) ** 0.5f) / (2 * a);
		let j2 = (-b - (b ** 2 - 4 * a * c) ** 0.5f) / (2 * a);

		//println(" j1,  j2 = ", j1, ", ", j2);
		//println("fj1, fj2 = ", floor_(j1), ", ", floor_(j2));
		//println("fj1, fj2 = ", ceil_ (j1), ", ", ceil_ (j2));

		let jmin = ceil_ (minf32(j1, j2));
		let jmax = floor_(maxf32(j1, j2));

		nwin = (jmax - jmin + 1);

		prod_ *= nwin;

	}

	close(f);

	println("part 1 = ", prod_);
	return prod_;
}

//==============================================================================

fn part2(): i64
{
	let prod_ = i64(1);

	let f = open(filename, "r");

	let str_ = readln(f);
	//println("str_ = ", str_);

	let strs  = split_(str_, ":");

	// There's only one "time" now but YOLO
	let times = parse_i32(rm_char(strs[1], " "));
	//let times = parse_i32_delim(strs[1], " ");

	//println("times = ", times);

	str_ = readln(f);
	strs  = split_(str_, ":");

	//let rec_dists = parse_i32_delim(strs[1], " ");
	let rec_dists = parse_i64(rm_char(strs[1], " "));

	//println("rec_dists = ", rec_dists);

	let race_time = times;
	let rec_dist = rec_dists;

	//println("race_time, rec_dist = ", race_time, ", ", rec_dist);

	//println("calculating distances ...");

	//// Brute force :(
	//let nwin = i64(0);
	//let first = false;
	//let jlast = 0;
	//for j in [1: race_time]
	//{
	//	// Acceleration is 1 mm/ms/ms
	//	let speed = j * 1;

	//	let duration = race_time - j;
	//	let dist = i64(speed) * duration;
	//	//println("dist = ", dist);

	//	if dist > rec_dist
	//	{
	//		if (not first) println("j first = ", j);
	//		first = true;
	//		jlast = j;
	//		nwin += 1;
	//	}
	//
	//}
	////println();
	//println("j last  = ", jlast);

	// Bisection search for minimum button press duration.  From calculus (or
	// just thinking about a parabolic trajectory), optimal amount of distance
	// can be covered by holding button for half of race_time
	let jlo = 0;
	let jhi = race_time / 2;
	while jlo < jhi - 1
	{
		//println("jlo, jhi = ", [jlo, jhi]);
		let j = (jlo + jhi) / 2;

		let speed = j * 1;
		let duration = race_time - j;
		let dist = i64(speed) * duration;
		//println("dist = ", dist);

		if dist > rec_dist
			jhi = j;
		else
			jlo = j;
	}
	let jmin = jhi;
	//println("jmin = ", jmin);

	// Bisection search for maximum button press duration
	jlo = race_time / 2;
	jhi = race_time;
	while jlo < jhi - 1
	{
		//println("jlo, jhi = ", [jlo, jhi]);
		let j = (jlo + jhi) / 2;

		let speed = j * 1;
		let duration = race_time - j;
		let dist = i64(speed) * duration;
		//println("dist = ", dist);

		if dist > rec_dist
			jlo = j;
		else
			jhi = j;
	}
	let jmax = jlo;
	//println("jmax = ", jmax);

	let nwin = jmax - jmin + 1;

	//println("nwin = ", nwin);

	prod_ *= nwin;

	close(f);

	println("part 2 = ", prod_);
	return prod_;
}

//==============================================================================

fn main(): i64
{
	println();
	println("Starting AOC syntran main 2023/06");

	let sum_ = i64(0);

	sum_ += part1();
	sum_ += part2(); // works but needs perf optimization for unit testing

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

