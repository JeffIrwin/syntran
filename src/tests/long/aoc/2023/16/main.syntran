
#include("../../utils.syntran");

//==============================================================================

let ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

let NDIRS = 4;

// Cardinal directions
let DIRS =
	[
		 0, -1, // north
		-1,  0, // west
		 0,  1, // south
		 1,  0  // east
		 ;
		 2,  NDIRS
	];
//println("DIRS = ", DIRS);

// Note consistent ordering with DIRS array
let NORTH = 0;
let WEST  = 1;
let SOUTH = 2;
let EAST  = 3;

//****************

// Stack of unprocessed beams.  Contains direction and location
let STACK_CAP  = 1024;
let stack_ = [-1; 3, STACK_CAP];
let sptr   = 0; // stack pointer

// grid_beams[d, x, y] is true if there is a beam in direction d at location
// [x, y]
let grid_beams = [false; 0, 0, 0];

// Character grid
let grid = [""; 0, 0];

//==============================================================================

fn push_(dir: i32, x: i32, y: i32)
{
	if sptr >= STACK_CAP
	{
		println();
		println("Error: STACK_CAP overflow!");
		println();
	}
	stack_[0, sptr] = dir;
	stack_[1, sptr] = x;
	stack_[2, sptr] = y;
	sptr += 1;
	return;
}

fn pop_(): [i32; :]
{
	sptr -= 1;
	if sptr < 0
	{
		println();
		println("Error: STACK_CAP underflow!");
		println();
	}
	return
		[
			stack_[0, sptr],
			stack_[1, sptr],
			stack_[2, sptr]
		];
}

fn beams_empty(): bool
{
	return sptr <= 0;
}

//==============================================================================

fn part1(): i32
{
	let ny = countln_(filename);

	let f = open(filename, "r");
	let str_ = readln(f);

	let nx = i32(len(str_));

	//println("nx, ny = ", [nx, ny]);

	grid = [""; nx, ny];
	grid_beams = [false; NDIRS, nx, ny];

	for y in [0: ny]
	{
		//println("str_ = ", str_);

		for x in [0: nx]
			grid[x, y] = str_[x];

		str_ = readln(f);
	}
	close(f);

	//println("grid = ", grid);

	// Start at northwest corner going east
	let x = 0;
	let y = 0;
	let dir = EAST;
	push_(dir, x, y);

	// Follow the beams with an iterative depth-first search, using a stack to
	// keep track of beams.  Each time the beam is split, an extra beam is
	// pushed onto the stack
	//
	// Syntran does not have recursion (yet), so I have to do this iteratively,
	// i.e. using a loop instead of using recursive fn calls

	//println("sptr = ", sptr);
	//let k = 0;
	while not beams_empty() //and k < 16
	{
		let beam = pop_();
		dir = beam[0];  // unpack popped beam from array
		x   = beam[1];
		y   = beam[2];

		//println("sptr = ", sptr);
		//println("x, y = ", [x, y]);

		let c = "o";
		if 0 <= x and x < nx and 0 <= y and y < ny
			c = grid[x, y];
		//println("c = ", c);

		if c == "o"
		{
			// Do nothing (off grid)
		}
		else if grid_beams[dir, x, y]
		{
			// Do nothing (we've already been here)
		}
		else if c == "|" and (dir == EAST or dir == WEST)
		{
			grid_beams[dir, x, y] = true;
			if (y > 0     ) push_(NORTH, x, y - 1);
			if (y < ny - 1) push_(SOUTH, x, y + 1);
		}
		else if c == "-" and (dir == NORTH or dir == SOUTH)
		{
			grid_beams[dir, x, y] = true;
			if (x > 0     ) push_(WEST, x - 1, y);
			if (x < nx - 1) push_(EAST, x + 1, y);
		}
		else if (c == "/" and dir == EAST) or (c == "\" and dir == WEST) // " rust syntax highlighter hack :(
		{
			grid_beams[dir, x, y] = true;
			if (y > 0) push_(NORTH, x, y - 1);
		}
		else if (c == "/" and dir == WEST) or (c == "\" and dir == EAST) // " 
		{
			grid_beams[dir, x, y] = true;
			if (y < ny - 1) push_(SOUTH, x, y + 1);
		}
		else if (c == "/" and dir == NORTH) or (c == "\" and dir == SOUTH) // "
		{
			grid_beams[dir, x, y] = true;
			if (x < nx - 1) push_(EAST, x + 1, y);
		}
		else if (c == "/" and dir == SOUTH) or (c == "\" and dir == NORTH) // "
		{
			grid_beams[dir, x, y] = true;
			if (x > 0) push_(WEST, x - 1, y);
		}
		else // handles "." as well as parallel beam direction splitters
		{
			grid_beams[dir, x, y] = true;
			x += DIRS[0, dir];
			y += DIRS[1, dir];
			if 0 <= x and x < nx and 0 <= y and y < ny
			{
				//println("pushing ", c);
				push_(dir, x, y);
				//println("done");
			}
		}

		//println("k = ", k);
		//k += 1; // debug only
	}

	// Count energized tiles
	let sum_ = 0;
	for x in [0: nx]
		for y in [0: ny]
		{
			if grid_beams[0,x,y] or
			   grid_beams[1,x,y] or
			   grid_beams[2,x,y] or
			   grid_beams[3,x,y]
			{
				sum_ += 1;
			}
		}

	println("part 1 = ", sum_);
	return sum_;
}

//==============================================================================

fn count_energized_tiles(dir: i32, x: i32, y: i32, nx: i32, ny: i32): i32
{
	// Part 1 could be refactored to use this fn instead of copy/pasta

	grid_beams = [false; NDIRS, nx, ny];
	push_(dir, x, y);

	while not beams_empty()
	{
		let beam = pop_();
		dir = beam[0];  // unpack from array
		x   = beam[1];
		y   = beam[2];

		//println("sptr = ", sptr);
		//println("x, y = ", [x, y]);

		let c = "o";
		if 0 <= x and x < nx and 0 <= y and y < ny
			c = grid[x, y];
		//println("c = ", c);

		if c == "o"
		{
			// Do nothing (off grid)
		}
		else if grid_beams[dir, x, y]
		{
			// Do nothing (we've already been here)
		}
		else if c == "|" and (dir == EAST or dir == WEST)
		{
			grid_beams[dir, x, y] = true;
			if (y > 0     ) push_(NORTH, x, y - 1);
			if (y < ny - 1) push_(SOUTH, x, y + 1);
		}
		else if c == "-" and (dir == NORTH or dir == SOUTH)
		{
			grid_beams[dir, x, y] = true;
			if (x > 0     ) push_(WEST, x - 1, y);
			if (x < nx - 1) push_(EAST, x + 1, y);
		}
		else if (c == "/" and dir == EAST) or (c == "\" and dir == WEST) // " rust syntax highlighter hack :(
		{
			grid_beams[dir, x, y] = true;
			if (y > 0) push_(NORTH, x, y - 1);
		}
		else if (c == "/" and dir == WEST) or (c == "\" and dir == EAST) // " 
		{
			grid_beams[dir, x, y] = true;
			if (y < ny - 1) push_(SOUTH, x, y + 1);
		}
		else if (c == "/" and dir == NORTH) or (c == "\" and dir == SOUTH) // "
		{
			grid_beams[dir, x, y] = true;
			if (x < nx - 1) push_(EAST, x + 1, y);
		}
		else if (c == "/" and dir == SOUTH) or (c == "\" and dir == NORTH) // "
		{
			grid_beams[dir, x, y] = true;
			if (x > 0) push_(WEST, x - 1, y);
		}
		else // handles "." as well as parallel beam direction splitters
		{
			grid_beams[dir, x, y] = true;
			x += DIRS[0, dir];
			y += DIRS[1, dir];
			if 0 <= x and x < nx and 0 <= y and y < ny
				push_(dir, x, y);
		}
	}

	// Count energized tiles
	let sum_ = 0;
	for x in [0: nx]
		for y in [0: ny]
			if grid_beams[0,x,y] or
			   grid_beams[1,x,y] or
			   grid_beams[2,x,y] or
			   grid_beams[3,x,y]
			{
				sum_ += 1;
			}

	return sum_;
}

//==============================================================================

fn part2(): i32
{
	let ny = countln_(filename);

	let f = open(filename, "r");
	let str_ = readln(f);

	let nx = i32(len(str_));

	//println("nx, ny = ", [nx, ny]);

	grid = [""; nx, ny];

	for y in [0: ny]
	{
		//println("str_ = ", str_);

		for x in [0: nx]
			grid[x, y] = str_[x];

		str_ = readln(f);
	}
	close(f);

	//println("grid = ", grid);

	//let x = 0;
	//let y = 0;
	//let dir = EAST;
	//let tiles = count_energized_tiles(dir, x, y, nx, ny);
	//println("tiles = ", tiles);

	let tiles_max = -1;

	for x in [0: nx]
	{
		let y = 0;
		let dir = SOUTH;
		let tiles = count_energized_tiles(dir, x, y, nx, ny);
		tiles_max = max(tiles_max, tiles);
		//println("tiles = ", tiles);

		y = ny - 1;
		dir = NORTH;
		tiles = count_energized_tiles(dir, x, y, nx, ny);
		tiles_max = max(tiles_max, tiles);
		//println("tiles = ", tiles);
	}

	for y in [0: ny]
	{
		let x = 0;
		let dir = EAST;
		let tiles = count_energized_tiles(dir, x, y, nx, ny);
		tiles_max = max(tiles_max, tiles);
		//println("tiles = ", tiles);

		x = nx - 1;
		dir = WEST;
		tiles = count_energized_tiles(dir, x, y, nx, ny);
		tiles_max = max(tiles_max, tiles);
		//println("tiles = ", tiles);
	}

	//println("tiles_max = ", tiles_max);

	let sum_ = tiles_max;
	println("part 2 = ", sum_);
	return sum_;
}

//==============================================================================

fn main(): i32
{
	println();
	println("Starting AOC syntran main 2023/16");

	let sum_ = 0;

	sum_ += part1();
	sum_ += part2();

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

