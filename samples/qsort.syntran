
// Quick sort algorithm
//
// See `src/tests/test-src/fns/test-18.syntran` for a version that actually
// returns a value
//
// This version can be good by adapting for global vars with a perf boost for
// not passing args by value (c.f. AOC 2023 day 17)

fn qsort(arr: [i32; :])
{
	println("starting qsort()");
	println("arr = ", arr);

	let l = 0;
	let h = size(arr,0) - 1;

	if l < h
	{
		let stack = [0; h - l + 1];

		let top = -1;

		top += 1;
		stack[top] = l;

		top += 1;
		stack[top] = h;

		while top >= 0
		{
			h = stack[top];
			top -= 1;

			l = stack[top];
			top -= 1;

			//// inlined
			//let p = partition(arr, l, h);
			let x = arr[h];
			let i = (l - 1);
			for j in [l: h]
				if arr[j] <= x
				{
					i += 1;
					let tmp = arr[i];
					arr[i]  = arr[j];
					arr[j]  = tmp;
				}
			let tmp = arr[i+1];
			arr[i+1] = arr[h];
			arr[h] = tmp;
			let p = i + 1;

			if p - 1 > l
			{
				top += 1;
				stack[top] = l;
			
				top += 1;
				stack[top] = p - 1;
			}

			if p + 1 < h
			{
				top += 1;
				stack[top] = p + 1;
			
				top += 1;
				stack[top] = h;
			}
		}
	}
	println("arr = ", arr);
}

fn main()
{
	let arr = [4, 3, 5, 2, 1, 3, 2, 3]; 
	qsort(arr);
}

main();

