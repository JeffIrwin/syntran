
// This file implements the SHA256 SHA-2 hash calculation in syntran
//
// The function to get the 64-char hex str digest of a message `msg` is:
//
//     fn sha256(msg: str): str
//

//****************

// TODO: make a unit test for this

//==============================================================================

// TODO: prefix/suffix global vars with a namespace id (sha256)

fn rightrotate(x: i32, rot: i32): i32
{
	// c.f. aes_rotl8() from syntran/samples/aes.syntran and md5
	return ((x >> rot) | (x << (32 - rot)));
}

fn sha256(msg: str): str
{
	// Calculate the SHA-2 SHA256 hash of a str message and return the digest as
	// a 64-char hex str

	// Initialize hash values are the first 32 bits of the fractional parts of the
	// square roots of the first 8 primes 2..19.  There is an explanation of how
	// to calculate these here:
	//
	//     https://armantheparman.com/sha256/
	//
	let digest = [
		0x6a09_e667,
		0xbb67_ae85,
		0x3c6e_f372,
		0xa54f_f53a,
		0x510e_527f,
		0x9b05_688c,
		0x1f83_d9ab,
		0x5be0_cd19
	];

	// Initialize array of round constants: (first 32 bits of the fractional
	// parts of the cube roots of the first 64 primes 2..311):
	let k = [
		0x428a_2f98, 0x7137_4491, 0xb5c0_fbcf, 0xe9b5_dba5,
		0x3956_c25b, 0x59f1_11f1, 0x923f_82a4, 0xab1c_5ed5,
		0xd807_aa98, 0x1283_5b01, 0x2431_85be, 0x550c_7dc3,
		0x72be_5d74, 0x80de_b1fe, 0x9bdc_06a7, 0xc19b_f174,
		0xe49b_69c1, 0xefbe_4786, 0x0fc1_9dc6, 0x240c_a1cc,
		0x2de9_2c6f, 0x4a74_84aa, 0x5cb0_a9dc, 0x76f9_88da,
		0x983e_5152, 0xa831_c66d, 0xb003_27c8, 0xbf59_7fc7,
		0xc6e0_0bf3, 0xd5a7_9147, 0x06ca_6351, 0x1429_2967,
		0x27b7_0a85, 0x2e1b_2138, 0x4d2c_6dfc, 0x5338_0d13,
		0x650a_7354, 0x766a_0abb, 0x81c2_c92e, 0x9272_2c85,
		0xa2bf_e8a1, 0xa81a_664b, 0xc24b_8b70, 0xc76c_51a3,
		0xd192_e819, 0xd699_0624, 0xf40e_3585, 0x106a_a070,
		0x19a4_c116, 0x1e37_6c08, 0x2748_774c, 0x34b0_bcb5,
		0x391c_0cb3, 0x4ed8_aa4a, 0x5b9c_ca4f, 0x682e_6ff3,
		0x748f_82ee, 0x78a5_636f, 0x84c8_7814, 0x8cc7_0208,
		0x90be_fffa, 0xa450_6ceb, 0xbef9_a3f7, 0xc671_78f2
	];

	let len0 = len(msg) * 8; // length *in bits* :(

	// Assume msg is complete bytes (no partial bytes)

	// Perform pre-process padding
	//
	// TODO: perform padding without so much str growth (do it all in one step)
	//
	// TODO: test padding with more msg lengths and try simplifying.  The
	// existing tests are not sufficient: the line that "could be negative"
	// works for all of them but not in general
	let num_zeros = 63 - ((i32(len(msg)) - 56) % 64 + 64) % 64;
	//let num_zeros = 55 - i32(len(msg)) % 64; // could be negative
	msg += char(0x80);
	//while len(msg) % 64 != 56
	//	msg += char(0x00);
	msg += repeat(char(0x00), num_zeros);

	//println("msg = `", msg, "`");
	//println("len(msg) = ", len(msg));

	// append original length in bits mod 2**64 to message
	//
	// Note endianness.  MD5 uses a little-endian convention, while SHA2 is
	// big-endian
	msg +=
		char(i32(len0 >> (8*7)) & 0xff) +
		char(i32(len0 >> (8*6)) & 0xff) +
		char(i32(len0 >> (8*5)) & 0xff) +
		char(i32(len0 >> (8*4)) & 0xff) +
		char(i32(len0 >> (8*3)) & 0xff) +
		char(i32(len0 >> (8*2)) & 0xff) +
		char(i32(len0 >> (8*1)) & 0xff) +
		char(i32(len0 >> (8*0)) & 0xff)
	;

	//println("msg = `", msg, "`");
	//println("len(msg) = ", len(msg));
	for i in [0: 64: len(msg)]
	{
		//println("i = ", i);
		//let chunk = msg[i: i + 64];

		// Break chunk into sixteen 32-bit words w[0:16]
		let w = [0; 64];
		for j in [0: 16]
		{
			w[j] |= i32(msg[i + 4*j + 3]) <<  0;
			w[j] |= i32(msg[i + 4*j + 2]) <<  8;
			w[j] |= i32(msg[i + 4*j + 1]) << 16;
			w[j] |= i32(msg[i + 4*j + 0]) << 24;
		}
		//println("w = ", w);

		// Extend the first 16 words into the remaining 48 words w[16:64] of
		// the message schedule array
		for j in [16: 64]
		{
			let s0 = rightrotate(w[j - 15],  7) ^ rightrotate(w[j - 15], 18) ^ (w[j - 15] >>  3);
			let s1 = rightrotate(w[j -  2], 17) ^ rightrotate(w[j -  2], 19) ^ (w[j -  2] >> 10);
			w[j] = w[j-16] + s0 + w[j-7] + s1;
		}

		// Initialize working variables to current hash value (scalars `a`
		// through `h` in reference)
		let ah = digest;

		// Compression function main loop
		for j in [0: 64]
		{
		    let s1 = rightrotate(ah[4], 6) ^ rightrotate(ah[4], 11) ^ rightrotate(ah[4], 25);
		    let ch = (ah[4] & ah[5]) ^ (!ah[4] & ah[6]);
		    let tmp1 = ah[7] + s1 + ch + k[j] + w[j];
		    let s0 = rightrotate(ah[0], 2) ^ rightrotate(ah[0], 13) ^ rightrotate(ah[0], 22);
		    let maj = (ah[0] & ah[1]) ^ (ah[1] & ah[2]) ^ (ah[2] & ah[0]);
		    let tmp2 = s0 + maj;

			ah[1:8] = ah[0:7];  // this rotation is easier with an array
			ah[4] += tmp1;
			ah[0]  = tmp1 + tmp2;
		}

		// Add the compressed chunk to the current hash value:
		digest += ah;
	}
	//println("digest = ", digest);

	// Now `digest` is the final hash value (big-endian)
	let HEX_CHARS = "0123456789abcdef";
	let hex_digest = "";
	for d in digest
		for i in [7: -1: -1]
			hex_digest += HEX_CHARS[(d >> (4*i)) & 0xf];
	//println("hex_digest = ");
	println(hex_digest);
	return hex_digest;
}

//****************

fn assert_eq(a: str, b: str): i32
{
	if (a == b) return 0;
	return 1;
}

fn main(): i32
{
	let status = 0;

	// Expected results can be generated in bash by `echo -n "str" | sha256sum`
	//
	// The `-n` suppresses the usual newline from echo.  Even though it's
	// whitespace, a newline, like any other character, changes the entire hash
	// result
	//
	status += assert_eq(sha256(
			""),
			"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
	);
	status += assert_eq(sha256(
			"The quick brown fox jumps over the lazy dog"),
			"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"
	);
	status += assert_eq(sha256(
			"The quick brown fox jumps over the lazy dog."), // just an extra "." at end
			"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c"
	);
	status += assert_eq(sha256(
			"jeff was here"),
			"71c86ef50dba2de9c5ad7b3278666596349a5246974389e6c6374ce85c903ae5"
	);
	status += assert_eq(sha256(
			repeat("jeff was here", 60)), // repeat to trigger multiple chunks
			"acb69d4674c6bc6b9ffd227d594823fa9dd369e0248efd0086d6e909639f8191"
	);

	if status != 0
	{
		println("Error: " + str(status) + " sha256 tests failed");
		exit(-1);
	}
	return status;
}
return main();

