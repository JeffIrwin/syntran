
// This script draws the "cool S" syntran logo

//==============================================================================

// Global constants and variables

//let NX_CANVAS = 1080;
let NX_CANVAS = 256;
//let NX_CANVAS = 128;
let NY_CANVAS = NX_CANVAS;

//let NX_CANVAS = 300;
//let NY_CANVAS = 400;

//let NX_CANVAS = 150;
//let NY_CANVAS = 200;

let NDIM = 2;
let NRGB = 3;
let NTRI = 3;

let canvas = [0; NRGB, NX_CANVAS, NY_CANVAS];

//==============================================================================

fn draw_tri(v0: [i32; :], v1: [i32; :], v2: [i32; :],
            c0: [i32; :], c1: [i32; :], c2: [i32; :])
{
	// Output a triangle onto the global canvas

	//println("drawing tri ...");
	//println("v0 = ", v0);

	// Buffer by 1 in case of rounding errors
	let xmin = min(v0[0], v1[0], v2[0]) - 1;
	let ymin = min(v0[1], v1[1], v2[1]) - 1;

	let xmax = max(v0[0], v1[0], v2[0]) + 2;
	let ymax = max(v0[1], v1[1], v2[1]) + 2;

	// Clamp to canvas bounds
	xmin = max(0, xmin);
	ymin = max(0, ymin);
	xmax = min(NX_CANVAS, xmax);
	ymax = min(NY_CANVAS, ymax);

	// Triangle determinant
	let det_ = (v0[0] - v2[0]) * (v1[1] - v2[1])
	         - (v1[0] - v2[0]) * (v0[1] - v2[1]);

	let tol = 0.001;

	// Iterate over pixels in triangle's bounding box
	for y in [ymin: ymax]
	for x in [xmin: xmax]
	{
		// Get barycentric coordinates
		let bary = [0.0; NTRI];

		// Note similar form as determinant, but v0 is replaced with [x,y]
		bary[0] = ((x     - v2[0]) * (v1[1] - v2[1])
		        -  (v1[0] - v2[0]) * (y     - v2[1])) * 1.0
		        / det_;

		// v1 is replaced with [x,y]
		bary[1] = ((v0[0] - v2[0]) * (y     - v2[1])
		        -  (x     - v2[0]) * (v0[1] - v2[1])) * 1.0
		        / det_;

		bary[2] = 1.0 - bary[0] - bary[1];
		//println("bary = ", bary);

		if all(-tol <= bary) and all(bary <= 1+tol)
		{
			let c = bary[0] * c0 + bary[1] * c1 + bary[2] * c2;
			canvas[0,x,y] = i32(c[0]);
			canvas[1,x,y] = i32(c[1]);
			canvas[2,x,y] = i32(c[2]);
		}
	}
}

//==============================================================================

fn draw_logo()
{
	println("drawing logo ...");

	// Set background diagonal gradient
	let color_up_left    = [10,  20, 110];
	let color_down_right = [10, 110,  20];
	let color_mid        = [10,  65,  65];
	draw_tri(
		[0, 0],
		[NX_CANVAS, NY_CANVAS],
		[NX_CANVAS, 0],
		color_up_left,
		color_down_right,
		color_mid);
	draw_tri(
		[0, 0],
		[0, NY_CANVAS],
		[NX_CANVAS, NY_CANVAS],
		color_up_left,
		color_mid,
		color_down_right);

	// One-sided margin dimensions
	let xmargin = i32(0.175 * NX_CANVAS);
	let ymargin = i32(0.025 * NY_CANVAS);
	//println("margins = ", [xmargin, ymargin]);

	// Dimensions of each part of cool S logo

	// Heights

	let h1 = i32((NY_CANVAS - 2 * ymargin) / 5.0);
	let h5 = h1;

	let h2 = i32((NY_CANVAS - 2 * ymargin - h1 - h5) / 3.0);
	let h4 = h2;

	let h3 = (NY_CANVAS - 2 * ymargin - h1 - h2 - h4 - h5);

	//println("h dimensions = ", [h1, h2, h3, h4, h5]);

	// Widths
	let w1 = i32((NX_CANVAS - 2 * xmargin) / 2.0);
	let w2 = w1;

	//println("w dimensions = ", [w1, w2]);

	// Helper dimensions (sums of others)

	let w12 = w1 + w2;

	let w1h = w1/2;
	let w2h = w1  + w2/2;

	let h12 = h1  + h2;
	let h13 = h12 + h3;
	let h14 = h13 + h4;
	let h15 = h14 + h5;

	let h2h = h1 + h2 + h3/2;

	// Numbers of vertices and triangles
	let nvrt = 16;
	let ntri = 16;

	// Vertices
	let vrt =
		[
			xmargin + w1 , ymargin      , // point 0
			xmargin      , ymargin + h1 , // point 1
			xmargin + w1 , ymargin + h1 , // .     2
			xmargin + w12, ymargin + h1 , // .     3
			xmargin      , ymargin + h12, // .     4
			xmargin + w1 , ymargin + h12, //       5
			xmargin + w12, ymargin + h12, //       6
			xmargin + w1h, ymargin + h2h, //       7
			xmargin + w2h, ymargin + h2h, //       8
			xmargin      , ymargin + h13, //       9
			xmargin + w1 , ymargin + h13, //      10
			xmargin + w12, ymargin + h13, //      11
			xmargin      , ymargin + h14, //      12
			xmargin + w1 , ymargin + h14, //      13
			xmargin + w12, ymargin + h14, //      14
			xmargin + w1 , ymargin + h15  //      15
			;
			NDIM, nvrt
		];
	//println("vrt = ", vrt);

	// Triangle vertex indices
	let tri =
		[
			 0,   1,   2, // tri 1
			 0,   2,   3, // tri 2
			 1,   4,   5, // .   3
			 1,   5,   2, // .   4
			 2,   5,   6, // .   5
			 2,   6,   3, //     6
			 4,  10,   5, //     7
			 5,   8,   6, //     8
			 5,  10,  11, //     9
			 7,   9,  10, //    10
			 9,  12,  10, //    11
			10,  12,  13, //    12
			10,  13,  14, //    13
			10,  14,  11, //    14
			12,  15,  13, //    15
			13,  15,  14  //    16
			;
			NTRI, ntri
		];
	//println("tri = ", tri);

	// Control colors, to be interpolated
	let c0  = [200, 200, 200];
	let c3  = [ 40, 220,  40];
	let c8  = [ 40,  40, 220];
	let c11 = c0;

	// Interpolate colors with floats

	let fc1  = 2.0 / 3.0 * c0 + 1.0 / 3.0 * c3;
	let fc2  = 1.0 / 3.0 * c0 + 2.0 / 3.0 * c3;

	println("c0  = ", c0);
	println("fc1 = ", fc1);
	println("fc2 = ", fc2);
	println("c3  = ", c3);

	let fc4  = 4.0 / 5.0 * c3 + 1.0 / 5.0 * c8;
	let fc5  = 3.0 / 5.0 * c3 + 2.0 / 5.0 * c8;
	let fc6  = 2.0 / 5.0 * c3 + 3.0 / 5.0 * c8;
	let fc7  = 1.0 / 5.0 * c3 + 4.0 / 5.0 * c8;

	let fc9  = 2.0 / 3.0 * c8 + 1.0 / 3.0 * c11;
	let fc10 = 1.0 / 3.0 * c8 + 2.0 / 3.0 * c11;

	// Cast.  i32() should support arrays :(
	//let c1  = [i32(fc1 [0]), i32(fc1 [1]), i32(fc1 [2])];
	let c1 = i32(fc1);

	let c2  = [i32(fc2 [0]), i32(fc2 [1]), i32(fc2 [2])];
	let c4  = [i32(fc4 [0]), i32(fc4 [1]), i32(fc4 [2])];
	let c5  = [i32(fc5 [0]), i32(fc5 [1]), i32(fc5 [2])];
	let c6  = [i32(fc6 [0]), i32(fc6 [1]), i32(fc6 [2])];
	let c7  = [i32(fc7 [0]), i32(fc7 [1]), i32(fc7 [2])];
	let c9  = [i32(fc9 [0]), i32(fc9 [1]), i32(fc9 [2])];
	let c10 = [i32(fc10[0]), i32(fc10[1]), i32(fc10[2])];

	// Syntran needs array concatenation :(
	//
	// Or LHS slicing, so the `colors` array can be constructed directly without
	// scalar hepers c0, c1, ...
	let ncolor = 11;
	let colors =
		[
			c0 [0], c0 [1], c0 [2],
			c1 [0], c1 [1], c1 [2],
			c2 [0], c2 [1], c2 [2],
			c3 [0], c3 [1], c3 [2],
			c4 [0], c4 [1], c4 [2],
			c5 [0], c5 [1], c5 [2],
			c6 [0], c6 [1], c6 [2],
			c7 [0], c7 [1], c7 [2],
			c8 [0], c8 [1], c8 [2],
			c9 [0], c9 [1], c9 [2],
			c10[0], c10[1], c10[2],
			c11[0], c11[1], c11[2]
			;
			NRGB, ncolor
		];

	// Triangle vertex colors, as an index of `colors` array
	let tri_colors =
		[
			 3,  4,  3, // tri 1
			 3,  3,  2, // tri 2
			 4,  5,  5, // .   3
			 4,  5,  3, // .   4
			 3,  1,  1, // .   5
			 3,  1,  2, //     6
			 5,  6,  5, //     7
			 1,  0,  1, //     8
			 5,  6,  6, //     9
			11, 10, 10, //    10
			10,  9, 10, //    11
			10,  9,  8, //    12
			 6,  8,  7, //    13
			 6,  7,  6, //    14
			 9,  8,  8, //    15
			 8,  8,  7  //    16
			;
			NTRI, ntri
		];

	for i in [0: ntri]
	{
		println("drawing tri ", i, "/", ntri, " ...");
		draw_tri(
			vrt[:, tri[0,i]],
			vrt[:, tri[1,i]],
			vrt[:, tri[2,i]],
			colors[:, tri_colors[0,i]],
			colors[:, tri_colors[1,i]],
			colors[:, tri_colors[2,i]]);
	}
}

//==============================================================================

fn write_ppm(filename: str)
{
	println("writing ppm `" + filename + "` ...");
	let f = open(filename);

	writeln(f, "P3");
	writeln(f, NX_CANVAS, " ", NY_CANVAS);
	writeln(f, 255);

	for y in [0: NY_CANVAS]
	for x in [0: NX_CANVAS]
	{
		//// TODO: can I/O be optimized without so much looping?
		//let str_ = str(
		//	canvas[0,x,y], " ",
		//	canvas[1,x,y], " ",
		//	canvas[2,x,y]);
		//writeln(f, str_);

		writeln(f,
			canvas[0,x,y], " ",
			canvas[1,x,y], " ",
			canvas[2,x,y]);
	}

	close(f);
}

//==============================================================================

fn main(): i32
{
	println();
	println("starting syntran logo main");

	draw_logo();
	write_ppm("logo-syntran-v14.ppm");

	println("ending main");
	0;
}

//==============================================================================

main();

