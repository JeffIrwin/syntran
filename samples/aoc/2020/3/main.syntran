
// This is an advent of code solution in syntran.  Run like this:
//
//    cd /path/to/2020/n/
//    syntran main.syntran
//
// Where `n` is the day number

//==============================================================================

// It might be cleaner to use an array of filenames to toggle these

let input_file = "";
let test_input = not true;
if test_input
	input_file = "test-input.txt";
else
	input_file = "input.txt";

//==============================================================================

// Utility fns.  Should be in a separate included file but syntran doesn't have
// that feature yet

fn countlines(filename: str): i32
{
	let fi = open(filename);
	//println("fi = " + str(fi));

	let nlines = 0;
	while not eof(fi)
	{
		//println(i);
		let str = readln(fi);
		//println("eof syntran = " + str(eof(fi)));
		nlines += 1;
		//println();
	}
	nlines -= 1;
	close(fi);

	let ans = nlines;
}

//==============================================================================

fn scan(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic scan()

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = 0;
	while not found and i < len(str_)
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (found)
		i -= 1;
	else
		i = -1;
}

//==============================================================================

fn scanback(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic scan() with back = true

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = false;
	let i = len(str_) - 1;
	while not found and i > 0
	{

		let j = 0;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i -= 1;
	}

	// return
	if (found)
		i += 1;
	else
		i = -1;
}

//==============================================================================

fn verify(str_: str, set: str): i32
{
	// c.f. Fortran intrinsic verify()

	//println("str_ = ", str_);
	//println("set = ", set);

	let found = true;
	let i = 0;
	while found and i < len(str_)
	{
		//println(i);

		let j = 0;
		found = false;
		while not found and j < len(set)
		{
			found = str_[i] == set[j];
			j += 1;
		}
		i += 1;
	}

	// return
	if (not found)
		i -= 1;
	else
		i = -1;
}

//==============================================================================

fn tok_i32(str_: str): [i32; :]
{
	// tokenize a string into the first int contained within it, then return the
	// substring start index, end index, and length
	//
	// Double hyphens (--) will break this

	//println("starting tok_i32()");
	//println("str_ = ", str_);

	// first character can be a minus sign
	let snums = "-1234567890";
	let beg_ = scan    (str_, snums);

	let end_ = -1;
	let len_ = -1;

	if (beg_ >= 0)
	{

		let n = len(str_);
		//println("n = ", n);
	
		// subsequent characters cannot be minus signs
		let unums = "1234567890";

		// we've already found 1 starting char
		len_ = verify(str_[beg_+1: n], unums);
		//println("len_ = ", len_);
	
		if (len_ < 0)
		{
			// This is consistent with the way that verify() works in Fortran
			end_ = n - 1;
			len_ = end_ - beg_ + 1;
		}
		else
			//end_ = beg_ + len_ - 1;
			end_ = beg_ + len_;
	
		//println("beg_ = ", beg_);
		//println("end_ = ", end_);
	
		//println("num beg = ", str_[beg_]);
		//println("num end = ", str_[end_]);
		//println("num str = ", str_[beg_: end_+1]);
	}

	// return
	[beg_, end_, len_];
}

//==============================================================================

fn xor_(p: bool, q: bool): bool
{
	//// not sure why i overthought this.  syntran is nicer than fortran and
	//// it's not even worth having a fn

	//(p and not q) or (q and not p);
	p != q;
}

//==============================================================================

fn part1(): i32
{
	let sum_ = 0;

	let ny = countlines(input_file);

	let f = open(input_file);
	let s = readln(f);

	let nx = len(s);

	//println("nx, ny = ", nx, ", ", ny);

	// New in syntran 0.0.24
	let grid = [false; nx, ny];
	//let grid = [0; nx, ny];

	let iy = 0;
	while not eof(f)
	{
		//println("s = ", s);

		for ix in [0: nx]
			grid[ix,iy] = s[ix] == "#";

		//println();
		s = readln(f);
		iy += 1;
	}
	close(f);

	//println("grid = ", grid);

	let slope = [3, 1];

	let dx = slope[0];
	let dy = slope[1];

	let ix = 0;
	iy = 0;
	while iy < ny
	{
		// Don't need to check starting spot.  It's always empty anyway
		ix += dx;
		iy += dy;

		if grid[ix%nx, iy]
			sum_ += 1;
	}

	println("part1 = ", sum_);
	let ans = sum_;
}

//==============================================================================

fn part2(): i32
{

	let ny = countlines(input_file);

	let f = open(input_file);
	let s = readln(f);

	let nx = len(s);

	//println("nx, ny = ", nx, ", ", ny);

	// New in syntran 0.0.24
	let grid = [false; nx, ny];
	//let grid = [0; nx, ny];

	let iy = 0;
	while not eof(f)
	{
		//println("s = ", s);

		for ix in [0: nx]
			grid[ix,iy] = s[ix] == "#";

		//println();
		s = readln(f);
		iy += 1;
	}
	close(f);

	//println("grid = ", grid);


	let nslopes = 5;
	let slopes =
		[
			1, 1,
			3, 1,
			5, 1,
			7, 1,
			1, 2
			;
			2, nslopes
		];

	//println("slopes = ", slopes);

	let prod_ = 1;
	let prod_str = "";
	for islope in [0: nslopes]
	{
		let dx = slopes[0, islope];
		let dy = slopes[1, islope];

		//println("slope = ", dx, ", ", dy);

		let sum_ = 0;

		let ix = 0;
		iy = 0;
		while iy < ny
		{
			// Don't need to check starting spot.  It's always empty anyway
			ix += dx;
			iy += dy;

			if iy < ny and grid[ix%nx, iy]
				sum_ += 1;
		}

		// The product overflows i32 for the real input but I can cheat by
		// printing a string to eval in python
		prod_ *= sum_;
		prod_str = prod_str + str(sum_);
		if islope < nslopes - 1
			prod_str = prod_str + " * ";

	}

	//println("part2 = ", prod_);
	println("part2 = ", prod_str);
	let ans = prod_;
}

//==============================================================================

fn main(): i32
{
	println("Reading input file """, input_file, """");
	part1();
	part2();
}

//==============================================================================

main();

//==============================================================================

