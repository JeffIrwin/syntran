
// This file implements the MD5 hash calculation in syntran
//
// The function to get the 32-char hex str digest of a message `msg` is:
//
//     fn md5(msg: str): str
//

//****************

// This is covered as one of the bitwise unit tests

//==============================================================================

fn leftrotate_md5(x: i32, rot: i32): i32
{
	// c.f. aes_rotl8() from syntran/samples/aes.syntran
	return ((x << rot) | (x >> (32 - rot)));
}

// S_MD5 specifies the per-round shift amounts
let S_MD5 = [
	7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
	5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
	4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
	6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21
];

// TODO: try computing K_MD5 the sine way.  Will rounding error be an issue?
let K_MD5 = [
	0xd76a_a478, 0xe8c7_b756, 0x2420_70db, 0xc1bd_ceee,
	0xf57c_0faf, 0x4787_c62a, 0xa830_4613, 0xfd46_9501,
	0x6980_98d8, 0x8b44_f7af, 0xffff_5bb1, 0x895c_d7be,
	0x6b90_1122, 0xfd98_7193, 0xa679_438e, 0x49b4_0821,
	0xf61e_2562, 0xc040_b340, 0x265e_5a51, 0xe9b6_c7aa,
	0xd62f_105d, 0x0244_1453, 0xd8a1_e681, 0xe7d3_fbc8,
	0x21e1_cde6, 0xc337_07d6, 0xf4d5_0d87, 0x455a_14ed,
	0xa9e3_e905, 0xfcef_a3f8, 0x676f_02d9, 0x8d2a_4c8a,
	0xfffa_3942, 0x8771_f681, 0x6d9d_6122, 0xfde5_380c,
	0xa4be_ea44, 0x4bde_cfa9, 0xf6bb_4b60, 0xbebf_bc70,
	0x289b_7ec6, 0xeaa1_27fa, 0xd4ef_3085, 0x0488_1d05,
	0xd9d4_d039, 0xe6db_99e5, 0x1fa2_7cf8, 0xc4ac_5665,
	0xf429_2244, 0x432a_ff97, 0xab94_23a7, 0xfc93_a039,
	0x655b_59c3, 0x8f0c_cc92, 0xffef_f47d, 0x8584_5dd1,
	0x6fa8_7e4f, 0xfe2c_e6e0, 0xa301_4314, 0x4e08_11a1,
	0xf753_7e82, 0xbd3a_f235, 0x2ad7_d2bb, 0xeb86_d391
];
//println("S_MD5 = ", S_MD5);
//println("K_MD5 = ", K_MD5);

let HEX_CHARS_MD5 = "0123456789abcdef";

fn md5(msg: str): str
{
	// Calculate the MD5 hash of a str message and return the digest as a
	// 32-char hex str
	//
	// The digest is also available as an array of 4 ints near the end of this
	// fn

	// Initialize variables:
	let a0 = 0x6745_2301;  // note endianness
	let b0 = 0xefcd_ab89;
	let c0 = 0x98ba_dcfe;
	let d0 = 0x1032_5476;
	
	let len0 = i32(len(msg)) * 8; // length *in bits* :(
	
	// Assume msg is complete bytes (no partial bytes)

	// Perform pre-process padding

	// This line could probably be simplified
	let num_zeros = 63 - ((i32(len(msg)) - 56) % 64 + 64) % 64;
	
	// Append original length in bits mod 2**64 to message

	// Do all of the padding steps at once to avoid too much string growth
	// amortization
	msg +=
		char(0x80) +
		repeat(char(0x00), num_zeros) +
		char(0xff & (len0 >>  0)) +
		char(0xff & (len0 >>  8)) +
		char(0xff & (len0 >> 16)) +
		char(0xff & (len0 >> 24)) +
		char(0x00) +
		char(0x00) +
		char(0x00) +
		char(0x00)
	;
	//println("msg = `", msg, "`");
	//println("len(msg) = ", len(msg));
	
	for i in [0: 64: len(msg)]
	{
		//println("i = ", i);
	
		// break chunk into sixteen 32-bit words M[j], 0 ≤ j ≤ 15
		let m = [0; 16];
		for j in [0: 16]
		{
			m[j] |= i32(msg[i + 4 * j + 0]) <<  0;
			m[j] |= i32(msg[i + 4 * j + 1]) <<  8;
			m[j] |= i32(msg[i + 4 * j + 2]) << 16;
			m[j] |= i32(msg[i + 4 * j + 3]) << 24;
		}
		//println("m = ", m);
	
		// Initialize hash value for this chunk:
		let a = a0;
		let b = b0;
		let c = c0;
		let d = d0;
	
		// Main loop
		for i in [0: 64]
		{
			let f = 0;
			let g = 0;
			if 0 <= i and i <= 15 {
		        f = (b & c) | (!b & d);
		        g = i;
			} else if 16 <= i and i <= 31 {
		        f = (d & b) | (!d & c);
		        g = (5*i + 1) % 16;
			} else if 32 <= i and i <= 47 {
		        f = b ^ c ^ d;
		        g = (3*i + 5) % 16;
			} else if 48 <= i and i <= 63 {
		        f = c ^ (b | !d);
		        g = (7*i) % 16;
			}

		    // "Be wary of the below definitions of a,b,c,d" (what did they mean
			// by this?)
		    f = f + a + K_MD5[i] + m[g];  // m[g] must be a 32-bit block
		    a = d;
		    d = c;
		    c = b;
		    b = b + leftrotate_md5(f, S_MD5[i]);
		}
	
		// Add this chunk's hash to result so far
		a0 += a;
		b0 += b;
		c0 += c;
		d0 += d;
	}
	
	let digest = [a0, b0, c0, d0];
	//println("digest = ", digest);
	
	let hex_digest = repeat(" ", 32);
	
	let j = 0;
	for d in digest
		for i in [0: 4]
		{
			hex_digest[j+0] = HEX_CHARS_MD5[(d >> (4 * (2*i + 1))) & 0xf];
			hex_digest[j+1] = HEX_CHARS_MD5[(d >> (4 * (2*i + 0))) & 0xf];
			j += 2;
		}

	//println("hex_digest = ");
	//println(hex_digest);
	return hex_digest;
}

//****************

fn assert_eq(a: str, b: str): i32
{
	if (a == b) return 0;
	return 1;
}
fn main(): i32
{
	let status = 0;

	// Expected results can be generated in bash by `echo -n "str" | sha256sum`
	//
	// The `-n` suppresses the usual newline from echo.  Even though it's
	// whitespace, a newline, like any other character, changes the entire hash
	// result
	//
	status += assert_eq(md5(
			""),
			"d41d8cd98f00b204e9800998ecf8427e"
	);
	status += assert_eq(md5(
			"The quick brown fox jumps over the lazy dog"),
			"9e107d9d372bb6826bd81d3542a419d6"
	);
	status += assert_eq(md5(
			"jeff was here"),
			"8827ae539d0921970eb4837485220d18"
	);
	status += assert_eq(md5(
			repeat("jeff was here", 60)), // repeat to trigger multiple chunks
			"b33447f16a881ee569550ecff6182345"
	);
	status += assert_eq(md5(
			"abcdef609043"),
			"000001dbbfa3a5c83a2d506429c7b00e"
	);

	if status != 0
	{
		println("Error: " + str(status) + " md5 tests failed");
		exit(-1);
	}
	return status;
}
return main();

