
// This file implements the MD5 hash calculation in syntran
//
// The function to get the 32-char hex str digest of a message `msg` is:
//
//     fn md5(msg: str): str
//

//****************

// TODO: make a unit test for this

//==============================================================================

// TODO: prefix/suffix global vars with a namespace id (md5)
// This is already done in aoc version

fn leftrotate(x: i32, rot: i32): i32
{
	// c.f. aes_rotl8() from syntran/samples/aes.syntran
	return ((x << rot) | (x >> (32 - rot)));
}

fn md5(msg: str): str
{
	// Calculate the MD5 hash of a str message and return the digest as a
	// 32-char hex str
	//
	// The digest is also available as an array of 4 ints near the end of this
	// fn

	// s specifies the per-round shift amounts
	let s = [
		7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
		5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
		4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
		6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21
	];
	
	// TODO: try computing k the sine way.  Will rounding error be an issue?
	let k = [
		0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
		0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
		0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
		0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
		0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
		0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
		0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
		0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
		0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
		0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
		0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
		0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
		0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
		0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
		0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
		0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
	];
	//println("s = ", s);
	//println("k = ", k);

	// Initialize variables:
	let a0 = 0x67452301;  // note endianness
	let b0 = 0xefcdab89;
	let c0 = 0x98badcfe;
	let d0 = 0x10325476;
	
	let len0 = i32(len(msg)) * 8; // length *in bits* :(
	
	// Assume msg is complete bytes (no partial bytes)
	
	// Perform pre-process padding
	//
	// TODO: perform padding without so much str growth (do it all in one step)
	msg += char(0x80);
	while len(msg) % 64 != 56
		msg += char(0x00);
	
	//println("msg = `", msg, "`");
	//println("len(msg) = ", len(msg));
	
	// append original length in bits mod 264 to message
	msg +=
		char(0xff & (len0 >>  0)) +
		char(0xff & (len0 >>  8)) +
		char(0xff & (len0 >> 16)) +
		char(0xff & (len0 >> 24)) +
		char(0x00) +
		char(0x00) +
		char(0x00) +
		char(0x00)
	;
	//println("msg = `", msg, "`");
	//println("len(msg) = ", len(msg));
	
	for i in [0: 64: len(msg)]
	{
		//println("i = ", i);
		let chunk = msg[i: i + 64];
	
		//println("chunk = `");
		//println(chunk);
		//println("`");
		//println("len(chunk) = ", len(chunk));
	
		// break chunk into sixteen 32-bit words M[j], 0 ≤ j ≤ 15
		let m = [0; 16];
		for j in [0: 16]
		{
			m[j] |= i32(chunk[4 * j + 0]) <<  0;
			m[j] |= i32(chunk[4 * j + 1]) <<  8;
			m[j] |= i32(chunk[4 * j + 2]) << 16;
			m[j] |= i32(chunk[4 * j + 3]) << 24;
		}
		//println("m = ", m);
	
		// Initialize hash value for this chunk:
		let a = a0;
		let b = b0;
		let c = c0;
		let d = d0;
	
		// Main loop
		for i in [0: 64]
		{
			let f = 0;
			let g = 0;
			if 0 <= i and i <= 15 {
		        f = (b & c) | ((!b) & d);
		        g = i;
			} else if 16 <= i and i <= 31 {
		        f = (d & b) | ((!d) & c);
		        g = (5*i + 1) % 16;
			} else if 32 <= i and i <= 47 {
		        f = b ^ c ^ d;
		        g = (3*i + 5) % 16;
			} else if 48 <= i and i <= 63 {
		        f = c ^ (b | (!d));
		        g = (7*i) % 16;
			}

		    // Be wary of the below definitions of a,b,c,d
		    f = f + a + k[i] + m[g];  // m[g] must be a 32-bit block
		    a = d;
		
		    d = c;
		    c = b;
		    b = b + leftrotate(f, s[i]);
		}
	
		// Add this chunk's hash to result so far
		a0 += a;
		b0 += b;
		c0 += c;
		d0 += d;
	}
	
	let digest = [a0, b0, c0, d0];
	println("digest = ", digest);
	
	let HEX_CHARS = "0123456789abcdef";
	let hex_digest = "";
	
	for d in digest
		for i in [0: 4]
		{
			hex_digest += HEX_CHARS[(d >> (4 * (2*i + 1))) & 0xf];
			hex_digest += HEX_CHARS[(d >> (4 * (2*i + 0))) & 0xf];
		}
	
	println("hex_digest = ");
	println(hex_digest);
	return hex_digest;
}

//****************

fn assert_eq(a: str, b: str): i32
{
	if (a == b) return 0;
	return 1;
}

fn main(): i32
{
	let status = 0;

	status += assert_eq(md5(
			""),
			"d41d8cd98f00b204e9800998ecf8427e"
	);
	status += assert_eq(md5(
			"The quick brown fox jumps over the lazy dog"),
			"9e107d9d372bb6826bd81d3542a419d6"
	);
	status += assert_eq(md5(
			"jeff was here"),
			"8827ae539d0921970eb4837485220d18"
	);
	status += assert_eq(md5(
			repeat("jeff was here", 60)), // repeat to trigger multiple chunks
			"b33447f16a881ee569550ecff6182345"
	);
	status += assert_eq(md5(
			"abcdef609043"),
			"000001dbbfa3a5c83a2d506429c7b00e"
	);

	if status != 0
	{
		println("Error: " + str(status) + " md5 tests failed");
		exit(-1);
	}
	return status;
}

return main();

