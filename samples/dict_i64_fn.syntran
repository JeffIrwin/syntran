

// TODO: keep this in-sync with aoc-syntran version until they're stable


// A larger max hash val is ok with global vars, but copying in/out is very slow
// for passing by value, so 256 is better in this implementation

let HASH_MAX_DICT = 256;
//HASH_MAX_DICT = 1024 * 8;

//==============================================================================

fn hash_str_dict(s: str): i32
{
	// This is the hash fn that determines which bucket a key goes into

	//// djb2 hash fn
	//let hash_ = 5381;
	////let hash_ = 5381'i64;
	//for j in [0: len(s)]
	//{
	//	hash_ = ((hash_ << 5) + hash_) + i32(s[j]);
	//	//hash_ = hash_ * 33 + i32(s[j]);
	//	hash_ %= HASH_MAX_DICT; // not part of djb2, but it crashes without this :(
	//}
	////hash_ %= HASH_MAX_DICT;
	////return i32(hash_);
	//return hash_;

	// This is the hash fn from aoc 2023 day 15
	let hash_ = 0;
	for j in [0: len(s)]
	{
		hash_ += i32(s[j]);
		hash_ *= 17;
		hash_ %= HASH_MAX_DICT;
	}
	//println("hash_ = ", hash_);
	return hash_;
}

struct dict_i64_bucket
{
	cap: i32,
	len: i32,
	keys: [str; :],
	vals: [i64; :],
}

struct dict_i64
{
	len: i32,
	buckets: [dict_i64_bucket; :],
}

fn init_dict_i64(): dict_i64
{
	// TODO: arg?
	//let len_glbl = 256;
	let len_glbl64 = HASH_MAX_DICT;

	let empty_bucket_glbl64 = dict_i64_bucket
	{
		cap = 0,
		len = 0,
		keys = [""   ; 0],
		vals = [0'i64; 0],
	};

	let DICT_I64 = dict_i64
	{
		len = len_glbl64,
		buckets = [empty_bucket_glbl64; len_glbl64],
	};

	return DICT_I64;
}

fn print_lens_dict_i64(DICT_I64: &dict_i64)
{
	for i in [0: DICT_I64.len]
	{
		let len_ = DICT_I64.buckets[i].len;
		if len_ != 0
		{
			println("bucket[", i, "] len = ", len_);
			//println("bucket[", i, "] cap = ", DICT_I64.buckets[i].cap);
		}
	}
	return;
}

fn get_dict_i64(DICT_I64: &dict_i64, key: str): i64
{
	let ib = hash_str_dict(key); // bucket index
	let len_ = DICT_I64.buckets[ib].len;
	for i in [0: len_]
	{
		if DICT_I64.buckets[ib].keys[i] == key
		{
			return DICT_I64.buckets[ib].vals[i];
		}
	}
	// TODO: should we panic?
	return -1'i64;
	//return 0;
}

fn keys_dict_i64(DICT_I64: &dict_i64): [str; :]
{
	// Return a flat array of all the keys in the dict
	let n = 0;
	for i in [0: DICT_I64.len]
		n += DICT_I64.buckets[i].len;
	let keys = [""; n];
	let k = 0;
	for i in [0: DICT_I64.len]
	for j in [0: DICT_I64.buckets[i].len]
	{
		keys[k] = DICT_I64.buckets[i].keys[j];
		k += 1;
	}
	return keys;
}

fn vals_dict_i64(DICT_I64: &dict_i64): [i64; :]
{
	// Return a flat array of all the vals in the dict
	let n = 0;
	for i in [0: DICT_I64.len]
		n += DICT_I64.buckets[i].len;
	let vals = [0'i64; n];
	let k = 0;
	for i in [0: DICT_I64.len]
	for j in [0: DICT_I64.buckets[i].len]
	{
		vals[k] = DICT_I64.buckets[i].vals[j];
		k += 1;
	}
	return vals;
}

//fn set_dict_i64(DICT_I64: &dict_i64, key: str, val: i64): dict_i64
fn set_dict_i64(DICT_I64: &dict_i64, key: str, val: i64)
{
	// TODO: we really need dict arg as reference (not value) for efficiency
	//
	// Modifies a dict DICT_I64 as a global var for now

	let ib = hash_str_dict(key); // bucket index
	println("ib = ", ib);

	let len_ = DICT_I64.buckets[ib].len;
	println("len_ = ", len_);
	for i in [0: len_]
	{
		if DICT_I64.buckets[ib].keys[i] == key
		{
			// Reset existing value
			DICT_I64.buckets[ib].vals[i] = val;
			return;
		}
	}

	let cap_ = DICT_I64.buckets[ib].cap;
	if len_ >= cap_
	{
		// Grow arrays
		if cap_ == 0
			cap_ = 1;
		else
			cap_ *= 2;

		println("new cap_ = ", cap_);
		DICT_I64.buckets[ib].cap = cap_;
		println("done setting cap");
		let keys = DICT_I64.buckets[ib].keys;
		let vals = DICT_I64.buckets[ib].vals;

		DICT_I64.buckets[ib].keys = [""; cap_];

		DICT_I64.buckets[ib].vals = [0'i64 ; cap_];

		//DICT_I64.buckets[ib].keys[0: len_] = keys; // struct array slices not implemented :(
		//DICT_I64.buckets[ib].vals[0: len_] = vals;
		for i in [0: len_]
		{
			DICT_I64.buckets[ib].keys[i] = keys[i];
			DICT_I64.buckets[ib].vals[i] = vals[i];
		}
	}
	println("setting ", key, ", ", val);

	// Append new key value pair
	DICT_I64.buckets[ib].keys[len_] = key;
	DICT_I64.buckets[ib].vals[len_] = val;
	DICT_I64.buckets[ib].len += 1;

	return;
}

//==============================================================================

fn main(): i32
{
	// Unit tests

	println("starting dict.syntran");

	let DICT_I64 = init_dict_i64();
	println("len   = ", DICT_I64.len);
	println("len 0 = ", DICT_I64.buckets[0].len);
	println("cap 0 = ", DICT_I64.buckets[0].cap);

	//DICT_I64.buckets[0].cap = 7;
	//println("cap 0 = ", DICT_I64.buckets[0].cap);
	//DICT_I64.buckets[0].cap = 4;
	//print_lens_dict_i64(&DICT_I64);
	//exit(0);

	println("hash 'HASH' = ", hash_str_dict("HASH")); // 52
	println("hash 'rn=1' = ", hash_str_dict("rn=1")); // 30
	println("hash 'rn'   = ", hash_str_dict("rn"));   // 0
	println("hash 'cm'   = ", hash_str_dict("cm"));   // 0 (hash clash, good for testing)

	set_dict_i64(&DICT_I64, "rn", 1'i64);
	set_dict_i64(&DICT_I64, "qp", 3'i64);
	set_dict_i64(&DICT_I64, "cm", 2'i64);
	set_dict_i64(&DICT_I64, "pc", 4'i64);
	set_dict_i64(&DICT_I64, "ot", 9'i64);
	set_dict_i64(&DICT_I64, "ab", 5'i64);

	println("get 'rn' = ", get_dict_i64(&DICT_I64, "rn"));
	println("get 'qp' = ", get_dict_i64(&DICT_I64, "qp"));
	println("get 'cm' = ", get_dict_i64(&DICT_I64, "cm"));
	println("get 'pc' = ", get_dict_i64(&DICT_I64, "pc"));
	println("get 'ot' = ", get_dict_i64(&DICT_I64, "ot"));
	println("get 'ab' = ", get_dict_i64(&DICT_I64, "ab"));

	print_lens_dict_i64(&DICT_I64);

	println("keys = ", keys_dict_i64(&DICT_I64));
	println("vals = ", vals_dict_i64(&DICT_I64));

	println("ending dict.syntran");
	return 0;
}
return main();

