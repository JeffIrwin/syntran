{
	# can haz comments?
	"name": "CI",
	"on": [
		"push"
	],
	"jobs": {
		"test-os": {
			"name": "Test on ${{ matrix.os }}",
			"runs-on": "${{ matrix.os }}",
			"strategy": {
				"matrix": {
					"os": [
						"ubuntu-latest",
						"windows-latest",
						"macOS-latest"
					]
				}
			},
			"steps": [
				{"uses": "actions/checkout@v1"},
				{
					"uses": "fortran-lang/setup-fpm@v5",
					"with": {
						"github-token": "${{ secrets.GITHUB_TOKEN }}"
					}
				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"name": "Test docker",
					"run":
					"
						#./test-docker.sh \n
						docker --version \n
						docker build . -t sy \n
						docker run --entrypoint syntran sy --version \n
						docker run sy --version # syntran is already the default entrypoint \n
						docker run sy -c \"1 + 2;\" \n
						ans=$(docker run sy -c \"1 + 2;\") \n
						if [[ \"$ans\" == \" ans = \\`3\\`\" ]] ; then \n
							echo \"win\" \n
						else \n
							echo \"fail\" \n
						fi \n
					"
				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"name": "Set ubuntu PATH",
					"run": "echo \"$HOME/bin\" >> $GITHUB_PATH"
				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"name": "Test fpm default",

					"env": {
						"FPM_FC": "gfortran-12"
					},
					"run":
					"
						fpm install --prefix='$HOME' \n
						which syntran \n
						chmod +x ./samples/shebang.syntran \n
						./samples/shebang.syntran \n

						# No significant difference between release and (default) debug profile. \n
						# Maybe that will change after I copy the other half of AOC tests \n
						#fpm test test \n
						#fpm test long \n
						fpm test test --profile release \n
						fpm test long --profile release \n
					"
				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"run": "sudo apt-get install gfortran"
				},
				{
					"if": "matrix.os == 'macOS-latest'",
					"run": "
						brew install gcc@12 &&
						brew reinstall gcc@12"
				},
				{
					"name": "Build",
					"run":
					"
						#export OMP_NUM_THREADS=1 \n
						bash ./build.sh debug \n
						#ls -ltrh build/ \n
					"
				},
				{
					"if": "matrix.os != 'windows-latest'",
					"name": "Test debug",
					"run":
					"
						./build/syntran < samples/arithmetic.syntran  \n
						#./build/syntran < samples/bad-syntax.syntran \n
						time ./build/test \n
					"
				},

				# TODO: add a docker test run somewhere, if docker will run at all in
				# github actions

				{
					"if": "matrix.os != 'windows-latest'",
					"name": "Test release",
					"run":
					"
						bash ./build.sh release \n
						time ./build/test \n
					"
				}
			]
		},
		"test-gfortran": {
			"name": "Test with gfortran-${{ matrix.gfortran }}",
			"runs-on": "${{ matrix.os }}",
			"strategy": {
				"matrix": {
					"os": [
						"ubuntu-latest"
					],
					#"gfortran": [10, 11, 12, 13]  # TODO: gfort 13 has an issue
					#"gfortran": [9, 10, 11, 12]  # gfort 9 started segfaulting with the introduction of fortran submodules circa 9ae38b9d
					"gfortran": [10, 11, 12]  # gfort <= 8 not available by default on github ci workers
				}
			},
			"steps": [
				{
					"uses": "actions/checkout@v1"
				},
				{
					"uses": "fortran-lang/setup-fpm@v5",
					"with": {
						"github-token": "${{ secrets.GITHUB_TOKEN }}"
					}

				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"name": "Test ubuntu gfortran-${{ matrix.gfortran }}",
					"env": {
						"FPM_FC": "gfortran-${{ matrix.gfortran }}"
					},
					"run":
					"
						#fpm test test --verbose --flag -Wno-tabs \n
						#fpm test long \n
						fpm test test --profile release --verbose --flag -Wno-tabs \n
						fpm test long --profile release --flag -Wno-tabs \n
					"
				}
			]
		},
		"test-compilers": {
			"name": "Test with ${{ matrix.toolchain.compiler }}-${{ matrix.toolchain.version }}",
			"runs-on": "${{ matrix.os }}",
			"strategy": {
				"matrix": {
					"os": [
						"ubuntu-latest"
					],
					"toolchain": [
						{"compiler": "intel", "version": "2023.2"},
						{"compiler": "intel", "version": "2023.1"},
						#{"compiler": "intel", "version": "2023.0"},  # crashes on ` 	do while (is_whitespace(context%text(j:j)))`
						#{"compiler": "intel", "version": "2022.2"},  # ifx 2022.2 doesn't have `do while ()` :(
						#{"compiler": "intel", "version": "2024.0"},
						{"compiler": "intel-classic", "version": "2021.1"},
						{"compiler": "intel-classic", "version": "2021.10"},
						#{"compiler": "nvidia-hpc", "version": "23.11"}  # setup fails
					]
				}
			},
			"steps": [
				{
					"uses": "actions/checkout@v1"

				},
				{
					"uses": "fortran-lang/setup-fpm@v5",
					"with": {
						"github-token": "${{ secrets.GITHUB_TOKEN }}"
					}

				},
				{
					"uses": "fortran-lang/setup-fortran@v1",
					"id": "setup-fortran",
					"with": {
						"compiler": "${{ matrix.toolchain.compiler }}",
						"version": "${{ matrix.toolchain.version }}"
					}
				},
				{
					"if": "matrix.os == 'ubuntu-latest'",
					"name": "Test ${{ matrix.toolchain.compiler }} ${{ matrix.toolchain.version }}",
					"env": {
						"FPM_FC": "${{ env.FC }}"
					},
					"run":
					"
						fpm test test --verbose --flag \"-DSYNTRAN_INTEL -fpp\" \n
						fpm test long --verbose --flag \"-DSYNTRAN_INTEL -fpp\" \n
					"
				}
			]
		}
	}
}
